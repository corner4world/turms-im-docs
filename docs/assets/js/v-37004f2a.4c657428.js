"use strict";(self.webpackChunkturms_docs=self.webpackChunkturms_docs||[]).push([[755],{9989:(t,e,l)=>{l.r(e),l.d(e,{default:()=>d});const r=(0,l(6252).uE)('<h1 id="消息相关功能" tabindex="-1"><a class="header-anchor" href="#消息相关功能" aria-hidden="true">#</a> 消息相关功能</h1><h2 id="相关路径与模型" tabindex="-1"><a class="header-anchor" href="#相关路径与模型" aria-hidden="true">#</a> 相关路径与模型</h2><ul><li>管理员API路径：<code>/messages</code>。具体API细节请参考OpenAPI文档</li><li>客户端接口：请查阅<code>MessageServiceController</code>类</li><li>底层请求模型：请查阅<code>https://github.com/turms-im/proto/tree/master/request/message</code>目录下的接口描述文件</li><li>配置类：<code>im.turms.server.common.property.env.service.business.message.MessageProperties</code></li></ul><h2 id="功能列表" tabindex="-1"><a class="header-anchor" href="#功能列表" aria-hidden="true">#</a> 功能列表</h2><table><thead><tr><th style="text-align:left;"><strong><div style="min-width:70px;">消息功能</div></strong></th><th style="text-align:left;"><strong>功能描述</strong></th><th><strong>相关配置</strong></th></tr></thead><tbody><tr><td style="text-align:left;">离线消息</td><td style="text-align:left;">实现思路：您可以在Turms客户端每次登陆时，都&lt;主动&gt;向Turms服务端请求关于&lt;该用户在离线状态时，收到的所有私聊与群聊各自具体的离线消息数量，以及各自具体的最后N条消息（默认为1条）&gt;的数据，以此同时兼顾消息的实时性与服务的性能。 默认情况下，Turms服务端&lt;不会&gt;定时删除寄存在Turms服务端的任何离线消息</td><td>defaultAvailableMessagesNumberWithTotal</td></tr><tr><td style="text-align:left;">漫游消息</td><td style="text-align:left;">✍在新设备登录时，由开发者自行调用Turms客户端的消息查询接口，指定数量与时段等条件，向Turms服务端请求漫游消息。<br>漫游消息的实现本质与“历史消息”的实现一样<br>（✍原因：Turms无法自行判断什么是“新设备登陆”）</td><td></td></tr><tr><td style="text-align:left;">多端同步</td><td style="text-align:left;">当一名用户有多客户端同时在线时，Turms服务端会将消息下发给该用户所有在线的客户端</td><td></td></tr><tr><td style="text-align:left;">历史消息</td><td style="text-align:left;">支持查询用户的历史消息。默认Turms永久存储消息（包括用户消息或系统消息）<br>历史消息的实现本质与“漫游消息”的实现一样</td><td>messagePersistent<br>recordsPersistent<br>messageStatusPersistent<br>messageTimeToLiveHours<br>expiredMessagesCheckerCron</td></tr><tr><td style="text-align:left;">发送消息</td><td style="text-align:left;"></td><td>timeType<br>checkIfTargetActiveAndNotDeleted<br>maxTextLimit<br>maxRecordsSizeBytes<br>allowSendingMessagesToStranger<br>allowSendingMessagesToOneself<br>deleteMessageLogicallyByDefault<br>sendMessageToOtherSenderOnlineDevices</td></tr><tr><td style="text-align:left;">消息撤回</td><td style="text-align:left;">撤回投递成功的消息，默认允许发信人撤回距投递成功时间 5 分钟内的消息</td><td>allowRecallingMessage<br>availableRecallDurationSeconds</td></tr><tr><td style="text-align:left;">消息编辑</td><td style="text-align:left;">编辑已发送成功的消息</td><td>allowEditingMessageBySender</td></tr><tr><td style="text-align:left;">阅后即焚</td><td style="text-align:left;">收信人接收到发信人的消息后，收信人客户端会根据发信人预先设定（或默认）的时间按时自动销毁</td><td></td></tr><tr><td style="text-align:left;">已读回执</td><td style="text-align:left;">✍通知私聊对象或群组成员中，当前用户已读某条消息<br>查看私聊、群组会话中对方的已读/未读状态<br>（✍原因：Turms无法得知您的用户在什么情况下算是“已读某条消息”。开发者需要自行调用turmsClient.messageService.readMessage()来告知对方，当前用户已读某条消息）</td><td>updateReadDateWhenUserQueryingMessage<br>readReceipt.enabled<br>readReceipt.useServerTime</td></tr><tr><td style="text-align:left;">消息转发</td><td style="text-align:left;">将消息转发给其他用户或群组</td><td></td></tr><tr><td style="text-align:left;">@某人</td><td style="text-align:left;">用于特别提醒某用户。如果Turms客户端检测到已接收的消息中被@的用户为当前登陆中的用户，Turms客户端则会触发@回调函数。开发者可自行实现后续相关业务逻辑。常用于给被@的用户提醒通知。<br>群内 @ 消息与普通消息没有本质区别，仅是在被 @ 的人在收到消息时，需要做特殊处理（触发回调函数）</td><td></td></tr><tr><td style="text-align:left;">正在输入</td><td style="text-align:left;">✍当通信中的一方正在键入文本时，告知收信人（一名或多名用户），该用户正在输入消息<br>（✍原因：Turms无法得知您的用户是否正在键入文本）</td><td>typingStatus.enabled</td></tr></tbody></table><h2 id="业务消息类型" tabindex="-1"><a class="header-anchor" href="#业务消息类型" aria-hidden="true">#</a> 业务消息类型</h2><p>从开发者角度看，Turms客户端在发送消息时内部有且仅使用一种数据模型，即<code>CreateMessageRequest</code>。由于它带有string与List&lt;byte[]&gt;类型的字段，因此您实际上能在发送消息时传递任何形式的数据。只是Turms为方便开发者快速实现各种业务消息类型，Turms客户端对常见消息类型做了划分，以方便开发者快速上手。</p><p>提醒：Turms的消息（所有业务类型的消息）均可以标记为系统消息。但系统消息只能通过turms管理员API发送，Turms客户端无法发送系统消息。</p><table><thead><tr><th style="text-align:left;"><strong><div style="min-width:100px;">业务消息类型</div></strong></th><th style="text-align:left;"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left;">文本消息</td><td style="text-align:left;">消息内容为文本<br>提醒：文本也可以是JSON，编码成Base64的二进制数据</td></tr><tr><td style="text-align:left;">图片消息</td><td style="text-align:left;">消息内容为描述部分（可选）：图片 URL 地址、尺寸、图片大小<br>图片数据（可选）</td></tr><tr><td style="text-align:left;">语音消息</td><td style="text-align:left;">消息内容为描述部分（可选）：语音文件的 URL 地址、时长、大小、格式<br>语音数据（可选）<br></td></tr><tr><td style="text-align:left;">视频消息</td><td style="text-align:left;">消息内容为描述部分（可选）：视频文件的 URL 地址、时长、大小、格式<br>视频数据（可选）<br></td></tr><tr><td style="text-align:left;">文件消息</td><td style="text-align:left;">消息内容为描述部分（可选）：文件的 URL 地址、大小、格式<br>文件数据（可选）<br></td></tr><tr><td style="text-align:left;">地理位置消息</td><td style="text-align:left;">消息内容为地理位置标题、地址、经度、纬度信息</td></tr><tr><td style="text-align:left;">组合消息</td><td style="text-align:left;">消息内容为文本信息与任意个数的其他任意内容类消息类型的消息（如：一条消息既包含了文本，也包含了图片与音频）</td></tr><tr><td style="text-align:left;">自定义消息</td><td style="text-align:left;">Turms在传输时仅使用一种数据结构，它自身可以携带string与List&lt;byte[]&gt;数据结构。因此开发者可以自由实现任意的自定义消息类型，例如红包消息、石头剪子布等形式的消息</td></tr></tbody></table><h3 id="二进制数据的传输实现" tabindex="-1"><a class="header-anchor" href="#二进制数据的传输实现" aria-hidden="true">#</a> 二进制数据的传输实现</h3><p>二进制数据（文件）的传输实现方案主要有以下两种：</p><ol><li>（不推荐）Turms服务端默认支持传递与存储二进制数据，因此该数据也可以作为图片、视频、文件等数据来存储。但更推荐您将二进制数据交由OSS服务来存储。当然，如果您在知晓Turms业务服务端传输二进制数据并将该数据存储到数据库的利弊后，仍觉得对于您应用场景而言，该方案利大于弊，您也可使用该实现。</li><li>使用对象存储服务（AWS S3、阿里云OSS等）。客户端向您的服务服务端程序请求OSS操作许可Token，由客户端将带着这个Token找到OSS服务并上传文件至OSS，接着拿着从OSS那返回的文件URL传递给Turms服务端，由Turms保存这个URL文本，而不保留文件的二进制数据。 由于Turms插件支持开发者自行实现文件管理服务，因此您也可以通过实现插件的方式实现该功能。比如Turms官方提供的MinIO对象存储服务端的集成实现<code>turms-plugin-minio</code>就是基于Turms插件实现的，供您参考。</li></ol>',12),s={},d=(0,l(3744).Z)(s,[["render",function(t,e){return r}]])},3744:(t,e)=>{e.Z=(t,e)=>{for(const[l,r]of e)t[l]=r;return t}},6951:(t,e,l)=>{l.r(e),l.d(e,{data:()=>r});const r={key:"v-37004f2a",path:"/features/message.html",title:"消息相关功能",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"相关路径与模型",slug:"相关路径与模型",children:[]},{level:2,title:"功能列表",slug:"功能列表",children:[]},{level:2,title:"业务消息类型",slug:"业务消息类型",children:[{level:3,title:"二进制数据的传输实现",slug:"二进制数据的传输实现",children:[]}]}],filePathRelative:"features/message.md",git:{updatedTime:1641112367e3}}}}]);