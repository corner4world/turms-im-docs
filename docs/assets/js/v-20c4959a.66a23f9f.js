"use strict";(self.webpackChunkturms_docs=self.webpackChunkturms_docs||[]).push([[574],{3955:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h1 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h1><h2 id="插件拓展点列表" tabindex="-1"><a class="header-anchor" href="#插件拓展点列表" aria-hidden="true">#</a> 插件拓展点列表</h2><table><thead><tr><th>类别</th><th>拓展点</th><th>描述</th></tr></thead><tbody><tr><td>用户类</td><td>UserAuthenticator</td><td>用户登陆认证。当客户端向turms-gateway请求登录时，turms-gateway会调用该插件以实现自定义的登录认证逻辑。通过该插件，您就不需要（可选）将您业务系统中的用户信息同步到Turms当中了</td></tr><tr><td></td><td>UserOnlineStatusChangeHandler</td><td>用户在线状态变更Handler。当任意一位用户进入上线或离线状态时，turms-gateway会调用该接口</td></tr><tr><td>请求类</td><td>ClientRequestHandler</td><td>客户端业务请求处理器。用于修改请求参数（甚至可以转变成其他业务请求）与自定义请求实现。当turms收到客户端业务请求时会调用该Handler。通过该插件，您可以实现敏感词过滤等功能</td></tr><tr><td>通知与消息类</td><td>NotificationHandler</td><td>通知Handler。当由于某行为的发生需要通知给相关用户时，turms-gateway会调用该Handler。常用于集成自定义的第三方推送服务</td></tr><tr><td></td><td>ExpiredMessageAutoDeletionNotificationHandler</td><td>过期消息自动删除通知处理器。当Turms自动定期删除过期消息时，Turms服务端会调用该接口，告知该插件实现方所有将要被删除的消息。常用于开发者备份消息</td></tr><tr><td>服务实现类</td><td>StorageServiceProvider</td><td>存储服务Provider。Turms项目本身没有存储服务的具体实现，仅对外暴露了存储服务相关的接口，供该插件实现。（可参考turms-plugin-minio）</td></tr><tr><td>业务模型生命周期类（TODO）</td><td></td><td></td></tr></tbody></table><h2 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h2><ol><li><p>安装Turms项目的JAR包依赖，供您插件编译时使用</p><ul><li>Clone Turms的仓库。参考命令：<code>git clone --depth 1 https://github.com/turms-im/turms.git</code></li><li>在Turms项目的根目录（即<code>.git</code>目录的父目录）下，通过执行<code>mvn install -DskipUTs -DskipITs -DskipSTs</code>命令来编译Turms项目源码，并将生成的JAR包自动安装到本地的Maven仓库中，供您插件编译时使用</li></ul></li><li><p>搭建插件项目</p><ul><li><p>方案一（推荐）：将<code>turms/turms-plugin-demo</code>目录克隆一份到本地，并基于该模板进行开发。该方案可以减少不必要的重复配置工作。</p></li><li><p>方案二：手动搭建。具体步骤如下：</p><ol><li><p>新建一个Maven项目，并在<code>pom.xml</code>中添加依赖（实现turms-gateway服务端的插件，则添加turms-gateway依赖。实现turms-service的插件，则添加turms-service的依赖）：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>im.turms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>turms-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>im.turms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>turms-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>（可选）添加<code>maven-shade-plugin</code>用于将插件打包成uber JAR包。如果您不希望打包依赖JAR包，则不需要添加该插件，但需要您自行确认插件用到的依赖包已存在于Turms服务端当中。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.2.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>minimizeJar</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>minimizeJar</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>在<code>resources</code>目录下，新建一个名称为<code>plugin.properties</code>的文件，并添加以下插件描述信息（具体的参数值是您自定义插件的信息）</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">plugin.id</span><span class="token punctuation">=</span><span class="token attr-value">com.mydomain.MyPlugin</span>\n<span class="token attr-name">plugin.class</span><span class="token punctuation">=</span><span class="token attr-value">com.mydomain.MyPlugin</span>\n<span class="token attr-name">plugin.version</span><span class="token punctuation">=</span><span class="token attr-value">0.0.1</span>\n<span class="token attr-name">plugin.provider</span><span class="token punctuation">=</span><span class="token attr-value">com.mydomain</span>\n<span class="token attr-name">plugin.license</span><span class="token punctuation">=</span><span class="token attr-value">MIT</span>\n<span class="token attr-name">plugin.description</span><span class="token punctuation">=</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>其中：</p><ul><li><code>id</code>字段用于区分插件。无格式要求，但是必须不为空</li><li><code>class</code>字段用于引导Turms服务端加载JAR包内的<code>TurmsPlugin</code>实现类，必须不为空</li><li>其他字段起描述作用，暂无实际作用，均可为空</li></ul></li></ol></li></ul></li><li><p>新建一个继承自<code>TurmsPlugin</code>的类，如<code>public class MyPlugin extends TurmsPlugin</code>，然后即可编写插件实现。</p><p>其中：</p><ul><li><code>TurmsPlugin</code>的自定义子类是插件的入口类，且必须带有public的无参构造函数。在<code>plugin.properties</code>的引导下，Turms服务端会找到这个类，并对其进行初始化</li><li><code>TurmsPlugin</code>带有一个用于指定的<code>TurmsExtension</code>类的函数<code>getExtensions()</code>。它用于引导Turms服务端加载并初始化插件内自定义的<code>TurmsExtension</code>实现</li><li><code>TurmsExtension</code>是拓展功能点的具体实现类，一个<code>TurmsExtension</code>可<code>implement</code>一个或多个<code>ExtensionPoint</code>，且必须具有public的无参构造函数</li><li><code>ExtensionPoint</code>是Turms服务端定义的具体拓展功能点的接口，如<code>UserAuthenticator</code>与<code>ClientRequestHandler</code></li></ul></li><li><p>（可选）创建插件配置类，写上插件所需配置，并配置上<code>org.springframework.boot.context.properties.ConfigurationProperties</code>注释，用于定义配置名前缀。之后，您可以在<code>TurmsExtension</code>的实现类下，通过<code>loadProperties</code>函数，初始化并自动填充该配置类。</p><p>以具体代码为例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsPlugin</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsExtension</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">MyStorageServiceProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStorageServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsExtension</span> <span class="token keyword">implements</span> <span class="token class-name">StorageServiceProvider</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MyPluginProperties</span> properties <span class="token operator">=</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token class-name">MyPluginProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my-plugin&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPluginProperties</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> whatever <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>用构建工具（如Maven与Gradle）将源码编译并打包成JAR包，并将JAR包放到Turms服务端的<code>plugins</code>目录下。注意，Turms不支持加载<code>plugins</code>子目录的JAR包。</p><p>插件JAR包内的目录结构类似于：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>├─plugin.properties\n├─META-INF\n│  └─MANIFEST.MF\n└─com\n  └─mydomain\n    ├─MyStorageServiceProvider.class\n    ├─MyPlugin.class\n    └─MyPluginProperties.class\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><p>注意事项：</p><ul><li>Turms服务端只会检测<code>plugins</code>目录下，以<code>jar</code>结尾的JAR包是否为插件实现，因此如果您将插件JAR包放到<code>lib</code>目录下，则这些插件将不会被识别与使用。</li><li>Turms不对插件进行访问控制，您需要自行确保插件中没有恶意代码。注意：恶意插件不仅可以调用函数直接强制关闭Turms服务端，甚至可以直接控制操作系统。</li><li>由于Turms服务端未来将引入Valhalla项目，因此开发过程需要特别注意不要使用<code>synchronized</code>关键字来锁八大基本包装类的对象，否则将直接抛出异常。</li></ul><h2 id="class-loaders" tabindex="-1"><a class="header-anchor" href="#class-loaders" aria-hidden="true">#</a> Class Loaders</h2><p>Turms服务端中的插件实现相对灵活，既允许插件使用独立类环境，也允许插件与Turms服务端共享类环境。具体而言，在插件实现需要加载依赖包（如Netty）的时候，会让插件的class loader优先加载并使用插件JAR包内的实现，并且插件JAR包内的classes仅会被当前插件使用，不会被其他插件或Turms服务端内部使用。如果JAR包内无该依赖实现，则会让class loader将类加载工作委派给parent，并与Turms服务端共享类实现。如果Turms服务端自己也没加载该类，则会抛出<code>NoClassDefFoundError</code>异常。</p><h2 id="插件相关api接口" tabindex="-1"><a class="header-anchor" href="#插件相关api接口" aria-hidden="true">#</a> 插件相关API接口</h2><p>TODO</p><h2 id="插件debug步骤-基于intellij-idea" tabindex="-1"><a class="header-anchor" href="#插件debug步骤-基于intellij-idea" aria-hidden="true">#</a> 插件Debug步骤（基于Intellij IDEA）</h2><ol><li><p>在您插件项目下，按<code>Ctrl + F9</code>来自动编译并打包您的插件JAR包到<code>&lt;您插件项目根目录&gt;/target</code>目录下</p></li><li><p>在<code>turms-server-common</code>项目下，把在<code>src/main/java/im/turms/server/common/plugin/AbstractTurmsPluginManager.java</code>类内的<code>getPluginDir</code>函数实现改成：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Path</span> <span class="token function">getPluginDir</span><span class="token punctuation">(</span><span class="token class-name">Path</span> home<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;您插件项目根目录&gt;/target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>在您的插件源码上打上断点</p></li><li><p>通过IDEA启动turms-service或turms-gateway服务端，服务端将自动加载<code>&lt;您插件项目根目录&gt;/target</code>内的插件JAR包，并且当服务端执行到您插件源码的断点时，IDEA会暂停服务端运行供您调试</p></li></ol>',13),p={},e=(0,a(3744).Z)(p,[["render",function(n,s){return t}]])},3744:(n,s)=>{s.Z=(n,s)=>{for(const[a,t]of s)n[a]=t;return n}},3230:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-20c4959a",path:"/for-developers/custom-plugin.html",title:"自定义插件",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"插件拓展点列表",slug:"插件拓展点列表",children:[]},{level:2,title:"实现步骤",slug:"实现步骤",children:[]},{level:2,title:"Class Loaders",slug:"class-loaders",children:[]},{level:2,title:"插件相关API接口",slug:"插件相关api接口",children:[]},{level:2,title:"插件Debug步骤（基于Intellij IDEA）",slug:"插件debug步骤-基于intellij-idea",children:[]}],filePathRelative:"for-developers/custom-plugin.md",git:{updatedTime:1639041425e3}}}}]);