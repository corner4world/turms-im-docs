"use strict";(self.webpackChunkturms_docs=self.webpackChunkturms_docs||[]).push([[387],{3239:(t,d,r)=>{r.r(d),r.d(d,{default:()=>n});const e=(0,r(6252).uE)('<h1 id="敏感词过滤" tabindex="-1"><a class="header-anchor" href="#敏感词过滤" aria-hidden="true">#</a> 敏感词过滤</h1><p>Turms不支持且未来也不会支持图片、视频与语音的反垃圾检测功能，下文所有内容仅在文本检测范围内进行说明。</p><h2 id="功能特性对比" tabindex="-1"><a class="header-anchor" href="#功能特性对比" aria-hidden="true">#</a> 功能特性对比</h2><p>结合现实情况，商用敏感词过滤功能的最大优点是：词库丰富，更新及时，支持多语言。最主要缺点是：按检测次数收费、每次检测都需要发送网络请求；turms-plugin-antispam的最大优点是：免费、本地极速检测，只需遍历一遍目标串。最主要缺点是：不提供词库。具体而言：</p><table><thead><tr><th></th><th>成熟的商业反垃圾服务（含敏感词过滤）</th><th>turms-plugin-antispam</th></tr></thead><tbody><tr><td>免费</td><td>否。按检测次数收费</td><td>是</td></tr><tr><td>开源</td><td>否。完全闭源</td><td>是。完全开源</td></tr><tr><td>匹配速度</td><td>需要发送网络请求，比turms-plugin-antispam的匹配速度慢了几个数量级</td><td>本地极速匹配（基于双数组Trie的AC自动机算法实现）。您可以忽略匹配时带来的性能开销。<br>在NORMALIZATION模式下，匹配的时间复杂度为O(n)，n为输入字符串长度。<br>在NORMALIZATION_TRANSLITERATION模式下，音译的时间复杂度为O(n)，n为输入字符串长度。匹配音译结果的时间复杂度为O(m)，m为音译结果字符串长度。<br>补充：汉字音译指将汉字转换成拼音</td></tr><tr><td>文本去噪（如去标点符号、字母与数字标准化）</td><td>部分支持</td><td>部分支持</td></tr><tr><td>形近字匹配（如火星文）</td><td>部分支持</td><td>TODO（1.1支持）</td></tr><tr><td>拆字匹配</td><td>部分支持</td><td>TODO（1.2支持）</td></tr><tr><td>音近字精确匹配</td><td>支持</td><td>支持</td></tr><tr><td>音近字模糊匹配</td><td>支持</td><td>TODO（1.1支持）</td></tr><tr><td>多音字匹配</td><td>支持</td><td>TODO（1.1支持）</td></tr><tr><td>词库</td><td>闭源，但是词库丰富，更新及时</td><td>由于敏感词的特殊性，turms-plugin-antispam不提供敏感词词库，需要用户自行采集。<br>补充：引入敏感词库时，注意词库文件的编码，推荐统一使用“UTF-8”编码，以避免编码混乱</td></tr><tr><td>多语言/方言支持</td><td>支持多种语言与方言</td><td>需要用户自行采集词库。另外，也有项目通过调用“翻译API”，将源语言翻译成某特定语言再进行匹配，但turms-plugin-antispam不提供该类实现</td></tr><tr><td>生僻字支持</td><td>部分支持</td><td>部分支持。turms-plugin-antispam能够识别Unicode基本多语言平面（BMP）内的code points，支持识别两万多个汉字（《新华字典》最新版仅收录一万多个汉字）。<br>由于大部分IM应用都不要求一定要能显示特别生僻的字（如“𤳵”字），建议您的UI前端应用直接用如“?”的占位符对BMP之外的cope points进行替换。<br>turms-plugin-antispam没有计划支持BMP以外的code points</td></tr><tr><td>文字竖排检测</td><td>不支持</td><td>不支持</td></tr><tr><td>查询词库附加信息</td><td>附加信息丰富。如敏感词类别（涉黄、涉政、暴恐、违禁、谩骂、灌水、广告、广告法、涉价值观等）</td><td>TODO（1.0）。另外，虽然Turms之后会支持该功能，但Turms依旧不提供敏感词库</td></tr><tr><td>白名单</td><td>支持</td><td>TODO（1.1支持）</td></tr><tr><td>地区差异化服务</td><td>部分支持</td><td>不支持</td></tr></tbody></table><h2 id="敏感词检测的复杂性" tabindex="-1"><a class="header-anchor" href="#敏感词检测的复杂性" aria-hidden="true">#</a> 敏感词检测的复杂性</h2><ul><li><p>并不是什么文本都能检测的。以字符串“Turms是一个优秀的IM开源项目”为例，如果我们采用常规的竖排明文显示。那么如果敏感词检测系统不支持特征提取，那么该系统就无法检测该类文本：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>╔═╤═╤═╤═╤═╗\n║┊│项│的│是│Ｔ║\n║┊│目│Ｉ│一│ｕ║\n║┊│┊│Ｍ│个│ｒ║\n║┊│┊│开│优│ｍ║\n║┊│┊│源│秀│ｓ║\n╚═╧═╧═╧═╧═╝\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>甚至也可以先用加密算法对消息进行加密后再发送（比如您的应用支持Web端，那不法分子甚至可以给您的Web端，写个浏览器插件，让每条消息在发送前都进行加密，在收到时进行解密）。因此敏感词过滤只能提高发出敏感词行为的成本，没法根除发送敏感词这一行为。</p></li><li><p>大部分系统都不支持检测语义，尤其是正话反说，明褒暗贬。同样一句话，放在不同的上下文，可以有着完全不同的含义。</p></li><li><p>存在误封。对一些正常词汇又存在着误封，如很多商业服务将“水乳交融”认为是“具有极高可信度的色情词汇”，结果造成了正常用户的流失。补充：为了避免这种误封情况，需要将这些词语录入“白名单”中（turms-plugin-antispam目前暂不提供）。</p></li><li><p>实现可以非常灵活（turms-plugin-antispam暂无计划提供相关实现）。具体而言包括：根据不同区域的用户提供不同的敏感词过滤服务；相比私聊消息，对群消息实行更为严格检测；有些词具有时效性，在某些时候是敏感词，在某些时候就不是敏感词。</p></li></ul><p>鉴于上述敏感词检测的复杂性，<code>turms-plugin-antispam</code>所需做的就是：结合边际效应，综合考虑敏感词的广泛度、敏感词的识别难度、识别的系统资源开销，能够识别大多数敏感词与常见伪装方式，不要求能够识别相对少见的伪装形式。</p><h2 id="不使用其他开源实现的原因" tabindex="-1"><a class="header-anchor" href="#不使用其他开源实现的原因" aria-hidden="true">#</a> 不使用其他开源实现的原因</h2><p>在全球开源圈子内，目前可找到的开源实现的质量都非常之低，主要体现在：代码质量低（高空间复杂度与时间复杂度）、很多匹配功能都不支持、作者不具备工程设计能力，甚至还有收费的半开源IM项目通过遍历词库来进行匹配的。暂未有像turms-plugin-antispam这样的算法与代码质量都优秀的实现，且传统反垃圾方案（不涉及机器学习）的总体实现难度不大，因此Turms选择自研，也为后期众多拓展做足准备。具体而言：</p><ul><li>会算法的不会工程设计，会工程设计的不会算法。一方面，实现基于双数组Trie的AC自动机算法的难度较高，且Java的数据结构设计的都比较保守，如<code>String</code>与<code>StringBuilder</code>为了保证内部数据与外部数据隔离，很多函数都会涉及内存拷贝工作，能够在算法实现中避开各种Java的“坑”就需要工程师有基本的优化意识。另一方面，Turms里的反垃圾设计与算法实现的逻辑都是统一的，都是为了Turms这个IM项目设计的，为实际IM需求服务的。因此能保证“能想到的功能就能做到，不需要的功能就不需要提供，以免不必要的时间与空间开销”。</li><li>自研可以根据项目需求，定制算法实现与算法的上下游代码，以保证绝对的高效（把空间复杂度压到O(1)，时间复杂度压到O(n)，保证遍历一边字符串即可完成敏感词匹配）。举个例子，在AC自动机标准算法实现中，并没有涉及到“跳过某字符进行匹配”的逻辑。那么如果我们想要实现“只检测BMP内的code points”，就需要在把原始char[]传递给标准AC算法实现之前，先自行过滤并拷贝一个新的char[]，再传递给AC自动机进行匹配。这频繁的内存拷贝工作无疑是非常低效且不必要的，而定制实现的话，我们只需通过1行代码在AC自动机进行匹配时，自动跳过即可。即实现简单，也无需开辟新的内存空间，空间效率高。</li></ul><h2 id="配置讲解" tabindex="-1"><a class="header-anchor" href="#配置讲解" aria-hidden="true">#</a> 配置讲解</h2><p>配置类：<code>im.turms.plugin.antispam.property.AntiSpamProperties</code></p><p>配置前缀：<code>turms.plugin.antispam</code></p><h3 id="配置项" tabindex="-1"><a class="header-anchor" href="#配置项" aria-hidden="true">#</a> 配置项</h3><table><thead><tr><th>配置名</th><th>默认值</th><th>作用</th></tr></thead><tbody><tr><td>enabled</td><td>true</td><td>是否启动反垃圾功能</td></tr><tr><td>dictParsing.textFilePath</td><td>null</td><td>词库的文本文件路径</td></tr><tr><td>dictParsing.textFileCharset</td><td>&quot;UTF-8&quot;</td><td>词库编码格式。推荐统一使用“UTF-8”编码</td></tr><tr><td>dictParsing.skipInvalidCharacter</td><td>true</td><td>解析词库文本时，是否自动跳过非法字符。<br>如果false且在解析过程中遇到非法字符，则会抛出异常</td></tr><tr><td>dictParsing.binFilePath</td><td>null</td><td>词库的二进制文件路径。该文件保存了词库文本解析后的数据，用于避免每次服务端启动时都从头解析词库文本。如果用户配置了“textFilePath”与“binFilePath”，则会优先使用“binFilePath”</td></tr><tr><td>textParsingStrategy</td><td>NORMALIZATION_TRANSLITERATION</td><td>词典文本与用户输入文本的解析策略：<br>NORMALIZATION：对输入文本进行标准化。如：&quot;⑩HELLO(你{}好./&quot; -&gt; &quot;10hello你好&quot;<br>NORMALIZATION_TRANSLITERATION：对输入文本进行标准化并音译。如：&quot;⑩HELLO(你{}好./&quot; -&gt; &quot;10hellonihao&quot;</td></tr><tr><td>unwantedWordHandleStrategy</td><td>REJECT_REQUEST</td><td>非法文本处理策略：<br>REJECT_REQUEST：向客户端返回“MESSAGE_IS_ILLEGAL”错误状态码<br>MASK_TEXT：替换非法字符，并继续正常处理请求</td></tr><tr><td>mask</td><td>&#39;*&#39;</td><td>当“unwantedWordHandleStrategy”为“MASK_TEXT”时，所采用的掩码</td></tr><tr><td>textTypes</td><td>所有其他用户可见的文本</td><td>配置哪些请求的哪些文本字段需要进行检测</td></tr><tr><td>silentIllegalTextTypes</td><td>CREATE_MESSAGE_REQUEST_TEXT</td><td>配置当检测到这些请求的这些文本字段包含非法字符时，服务端会“OK”状态码响应客户端，但服务端实际并没有继续处理该请求</td></tr></tbody></table><h2 id="admin-api" tabindex="-1"><a class="header-anchor" href="#admin-api" aria-hidden="true">#</a> Admin API</h2><p>TODO</p>',18),a={},n=(0,r(3744).Z)(a,[["render",function(t,d){return e}]])},3744:(t,d)=>{d.Z=(t,d)=>{for(const[r,e]of d)t[r]=e;return t}},3854:(t,d,r)=>{r.r(d),r.d(d,{data:()=>e});const e={key:"v-6d278f0e",path:"/for-developers/anti-spam.html",title:"敏感词过滤",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"功能特性对比",slug:"功能特性对比",children:[]},{level:2,title:"敏感词检测的复杂性",slug:"敏感词检测的复杂性",children:[]},{level:2,title:"不使用其他开源实现的原因",slug:"不使用其他开源实现的原因",children:[]},{level:2,title:"配置讲解",slug:"配置讲解",children:[{level:3,title:"配置项",slug:"配置项",children:[]}]},{level:2,title:"Admin API",slug:"admin-api",children:[]}],filePathRelative:"for-developers/anti-spam.md",git:{updatedTime:1634344148e3}}}}]);