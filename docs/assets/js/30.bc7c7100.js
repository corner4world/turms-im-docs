(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{390:function(t,r,s){"use strict";s.r(r);var a=s(24),v=Object(a.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"业务模型状态感知"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#业务模型状态感知"}},[t._v("#")]),t._v(" 业务模型状态感知")]),t._v(" "),s("p",[t._v("为了让用户能感知业务模型状态的变化（增删改），Turms搭配使用了服务端主动通知机制与客户端主动拉取机制（支持版本控制），以在实时性与资源消耗之间取得平衡，并让开发者能够自行调整实时性与资源消耗之间的权重。")]),t._v(" "),s("h2",{attrs:{id:"感知方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#感知方式"}},[t._v("#")]),t._v(" 感知方式")]),t._v(" "),s("h3",{attrs:{id:"方式一-服务端主动通知机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式一-服务端主动通知机制"}},[t._v("#")]),t._v(" 方式一：服务端主动通知机制")]),t._v(" "),s("p",[t._v("通知机制指的是：当某个业务模型发生变化时（由于增删改操作），服务端将主动通知相关在线用户该事件的发生。而当客户端收到通知时，Turms客户端会触发NotificationService中的onNotification回调函数。该函数的参数为TurmsRequest对象，表明触发该事件的请求。")]),t._v(" "),s("p",[t._v("通知相关行为可以根据：im.turms.server.common.property.env.service.business.NotificationProperties 类进行配置。每一种通知类型都可以单独配置，并且所有通知相关配置均可在集群运行时进行动态更新。")]),t._v(" "),s("h4",{attrs:{id:"示例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("p",[t._v("以im.turms.turms.property.business.Notification#notifyMembersAfterGroupUpdate这个属性为例。该属性用于控制“当群组信息发生变化时，是否通知群组成员”。这里的群组信息指的是：群组名称、群组类型、群组禁言时间等这样具有全局性的群组信息。")]),t._v(" "),s("p",[t._v("如果您将该属性值设置为true，则当群组信息发生变化时，群组成员的客户端都将收到触发该变化的通知。否则，群组成员客户端不会收到任何通知。")]),t._v(" "),s("h4",{attrs:{id:"评价"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#评价"}},[t._v("#")]),t._v(" 评价")]),t._v(" "),s("p",[t._v("通知机制可以保证通知能实时地传递给相关用户，但其缺点就在于它很容易导致无意义的资源消耗（以具体业务场景为准）。比如用户A已经加入了100个群组，但该用户平时只查看其中3个群组的信息。这种场景下，如果100个群组的所有状态变化都开启了通知机制，则不管是服务端还是客户端都需要浪费大量资源去处理这些无意义的通知（因为该用户从来不看这些通知）。")]),t._v(" "),s("p",[t._v("为了解决该类问题，以及满足其他常见需求（如：要求当时离线的用户在上线时也能检测到业务模型是否发生变化；要求在线用户在通知被关闭的情况下也能感知业务模型的变化），Turms还提供了客户端主动拉取机制（支持版本控制）让用户来感知业务模型的变化。")]),t._v(" "),s("h3",{attrs:{id:"方式二-客户端主动拉取机制-支持版本控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方式二-客户端主动拉取机制-支持版本控制"}},[t._v("#")]),t._v(" 方式二：客户端主动拉取机制（支持版本控制）")]),t._v(" "),s("p",[t._v("注意："),s("strong",[t._v("Turms当前只支持全量更新的场景。对于需要增量更新的业务场景（如：秒级更新的动态群组成员列表），Turms会尽早予以支持。")])]),t._v(" "),s("p",[t._v("为了弥补上述提到的服务端主动通知机制的不足，Turms还提供了客户端主动拉取机制（支持版本控制）。")]),t._v(" "),s("h4",{attrs:{id:"大概实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#大概实现"}},[t._v("#")]),t._v(" 大概实现")]),t._v(" "),s("p",[t._v("Turms的每个业务模型都带有一个版本信息，这个版本信息记录了该业务模型最后一次更新的时间。当客户端向服务端请求资源时，可以携带客户端最后一次更新该业务模型的时间（也可以不带），Turms服务端会对这个版本信息与当前业务模型的版本信息进行比对，如果客户端发来的版本信息早于当前业务模型的版本信息，则Turms服务端会返回最新的业务模型数据，否则抛出状态码NO_CONTENT，在客户端处则会收到空数据。")]),t._v(" "),s("h4",{attrs:{id:"常见拉取时机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见拉取时机"}},[t._v("#")]),t._v(" 常见拉取时机")]),t._v(" "),s("ul",[s("li",[t._v("当您的应用被切换到前台时")]),t._v(" "),s("li",[t._v("会话重新连接上时")]),t._v(" "),s("li",[t._v("根据具体业务而定（看下文实例）")])]),t._v(" "),s("h4",{attrs:{id:"示例-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#示例-2"}},[t._v("#")]),t._v(" 示例")]),t._v(" "),s("p",[t._v("继续以上述的案例为例。假设我们希望群组成员之间能够实时感知其他群组成员资料信息的变化。那如果我们采用通知机制，假设每个群除了用户A还有其他100名在线用户，则用户A的资料信息变化，需要向其他10000（100*100）名群组成员发送通知，这在实际运用中是绝对不可取的。")]),t._v(" "),s("p",[t._v("在实际运用中，通常会在特定时机，比如用户打开某名用户的个人信息UI页面时，才让客户端主动请求服务端该用户的信息。同时，通过版本对比，减少无意义的资源浪费。")]),t._v(" "),s("p",[t._v("这种时刻注意实时性与资源消耗的设计要牢记在心中，以免设计出不切实际的应用场景。")])])}),[],!1,null,null,null);r.default=v.exports}}]);