import{_ as p,M as l,p as o,q as c,R as n,t as s,N as t,a1 as e}from"./framework-7f102627.js";const i={},u=e('<h1 id="自定义插件" tabindex="-1"><a class="header-anchor" href="#自定义插件" aria-hidden="true">#</a> 自定义插件</h1><h2 id="插件拓展点列表" tabindex="-1"><a class="header-anchor" href="#插件拓展点列表" aria-hidden="true">#</a> 插件拓展点列表</h2><table><thead><tr><th>类别</th><th>拓展点</th><th>描述</th></tr></thead><tbody><tr><td>管理员类</td><td>AdminActionHandler</td><td>管理员行为Handler。用于监听管理员的API操作</td></tr><tr><td>用户类</td><td>UserAuthenticator</td><td>用户登陆认证。当客户端向turms-gateway请求登录时，turms-gateway会调用该插件以实现自定义的登录认证逻辑。通过该插件，您就不需要（可选）将您业务系统中的用户信息同步到Turms当中了</td></tr><tr><td></td><td>UserOnlineStatusChangeHandler</td><td>用户在线状态变更Handler。当任意一位用户进入上线或离线状态时，turms-gateway会调用该接口</td></tr><tr><td>请求类</td><td>ClientRequestHandler</td><td>客户端业务请求处理器。用于修改请求参数（甚至可以转变成其他业务请求）与自定义请求实现。当turms收到客户端业务请求时会调用该Handler。通过该插件，您可以实现敏感词过滤等功能</td></tr><tr><td>通知与消息类</td><td>NotificationHandler</td><td>通知Handler。当由于某行为的发生需要通知给相关用户时，turms-gateway会调用该Handler。常用于集成自定义的第三方推送服务</td></tr><tr><td></td><td>ExpiredMessageDeletionNotifier</td><td>过期消息自动删除通知处理器。当Turms自动定期删除过期消息时，Turms服务端会调用该接口，告知该插件实现方所有将要被删除的消息。常用于开发者备份消息</td></tr><tr><td>服务实现类</td><td>StorageServiceProvider</td><td>存储服务Provider。Turms项目本身没有存储服务的具体实现，仅对外暴露了存储服务相关的接口，供该插件实现。（可参考turms-plugin-minio）</td></tr><tr><td>业务模型生命周期类（TODO）</td><td></td><td></td></tr></tbody></table><h2 id="插件加载方式" tabindex="-1"><a class="header-anchor" href="#插件加载方式" aria-hidden="true">#</a> 插件加载方式</h2>',4),d=n("p",null,[s("本地加载：Turms服务端会检测发布包"),n("code",null,"plugins"),s("目录下，以"),n("code",null,".jar"),s("文件名结尾的JAR包，以及以"),n("code",null,".js"),s("文件名结尾的JavaScript文件是否为插件实现，如果是插件，则会在Turms服务端启动时加载它们。")],-1),r=n("p",null,[s("注意：Turms服务端不会加载存放在"),n("code",null,"lib"),s("目录下的插件。")],-1),k={href:"https://turms-im.github.io/docs/for-developers/distribution.html#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E5%B8%83%E5%8C%85%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,"通过HTTP接口加载：",-1),m=n("ul",null,[n("li",null,[s("添加Java插件的API接口："),n("code",null,"POST /plugins/java")]),n("li",null,[s("添加JavaScript插件的API接口："),n("code",null,"POST /plugins/js")])],-1),g={href:"https://turms-im.github.io/docs/for-developers/plugin.html#%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3api%E6%8E%A5%E5%8F%A3",target:"_blank",rel:"noopener noreferrer"},b=n("li",null,[n("p",null,[s("通过turms-admin加载（基于“通过HTTP加载”实现）：在"),n("code",null,"/cluster/plugin"),s("页面，管理员也能通过UI的方式上传Java插件与JavaScript插件。")])],-1),h=e(`<h2 id="插件实现" tabindex="-1"><a class="header-anchor" href="#插件实现" aria-hidden="true">#</a> 插件实现</h2><p>Turms服务端支持基于JVM或JavaScript语言的插件实现。</p><table><thead><tr><th></th><th>JVM语言插件</th><th>JavaScript插件</th></tr></thead><tbody><tr><td>语言版本</td><td>Java 17 （Bytecode 61.0）</td><td>ECMAScript 2022</td></tr><tr><td>优点</td><td>适合实现逻辑复杂的功能。<br>比如Turms项目的官方插件<code>turms-plugin-antispam</code>敏感词过滤插件</td><td>只需新建一个JavaScript文件，就可以直接编写自定义逻辑，无需编译，无需打包；<br>方便支持热更新</td></tr><tr><td>缺点</td><td>如果只是实现一点自定义逻辑，依旧需要先搭个插件项目，然后基于构建工具将代码打包成Jar包，流程繁琐</td><td>如果需要实现复杂的逻辑，则不如基于Java插件实现；<br>内存开销比Java插件大；<br>解释执行，运行效率低</td></tr><tr><td>总评</td><td>更适合做实现复杂、偏重且实现相对固定的插件。<br>该类插件更像是一个“工程”</td><td>更适合小巧轻量、需要支持热更新的插件。<br>该类插件更像是一个“小补丁”</td></tr></tbody></table><h3 id="jvm语言版本-以java为例" tabindex="-1"><a class="header-anchor" href="#jvm语言版本-以java为例" aria-hidden="true">#</a> JVM语言版本（以Java为例）</h3><h4 id="实现步骤" tabindex="-1"><a class="header-anchor" href="#实现步骤" aria-hidden="true">#</a> 实现步骤</h4><ol><li><p>安装Turms项目的JAR包依赖，供您插件编译时使用</p><ul><li>Clone Turms的仓库。参考命令：<code>git clone --depth 1 https://github.com/turms-im/turms.git</code></li><li>在Turms项目的根目录（即<code>.git</code>目录的父目录）下，通过执行<code>mvn install -DskipUTs -DskipITs -DskipSTs</code>命令来编译Turms项目源码，并将生成的JAR包自动安装到本地的Maven仓库中，供您插件编译时使用</li></ul></li><li><p>搭建插件项目</p><ul><li><p>方案一（推荐）：将<code>turms/turms-plugin-demo</code>目录克隆一份到本地，并基于该模板进行开发。该方案可以减少不必要的重复配置工作。</p></li><li><p>方案二：手动搭建。具体步骤如下：</p><ol><li><p>新建一个Maven项目，并在<code>pom.xml</code>中添加依赖（实现turms-gateway服务端的插件，则添加turms-gateway依赖。实现turms-service的插件，则添加turms-service的依赖）：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>im.turms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>turms-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>im.turms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>turms-service<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.10.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>（可选）添加<code>maven-shade-plugin</code>用于将插件打包成uber JAR包。如果您不希望打包依赖JAR包，则不需要添加该插件，但需要您自行确认插件用到的依赖包已存在于Turms服务端当中。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>\${project.build.outputDirectory}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>
                <span class="token comment">&lt;!-- Prevent generating the &quot;original&quot; jar file --&gt;</span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>\${project.artifactId}-\${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>minimizeJar</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>minimizeJar</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在<code>resources</code>目录下，新建一个名称为<code>plugin.yaml</code>的文件，并添加以下插件描述信息（具体的参数值是您自定义插件的信息）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">id</span><span class="token punctuation">:</span> com.mydomain.MyPlugin
<span class="token key atrule">class</span><span class="token punctuation">:</span> com.mydomain.MyPlugin
<span class="token key atrule">version</span><span class="token punctuation">:</span> 0.0.1
<span class="token key atrule">provider</span><span class="token punctuation">:</span> com.mydomain
<span class="token key atrule">license</span><span class="token punctuation">:</span> MIT
<span class="token key atrule">description</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code>id</code>字段用于区分插件。无格式要求，但是必须不为空</li><li><code>class</code>字段用于引导Turms服务端加载JAR包内的<code>TurmsPlugin</code>实现类，必须不为空</li><li>其他字段起描述作用，暂无实际作用，均可为空</li></ul></li></ol></li></ul></li><li><p>新建一个继承自<code>TurmsPlugin</code>的类，如<code>public class MyPlugin extends TurmsPlugin</code>，然后即可编写插件实现。</p><p>其中：</p><ul><li><code>TurmsPlugin</code>的自定义子类是插件的入口类，且必须带有public的无参构造函数。在<code>plugin.yaml</code>的引导下，Turms服务端会找到这个类，并对其进行初始化</li><li><code>TurmsPlugin</code>带有一个用于指定的<code>TurmsExtension</code>类的函数<code>getExtensions()</code>。它用于引导Turms服务端加载并初始化插件内自定义的<code>TurmsExtension</code>实现</li><li><code>TurmsExtension</code>是拓展功能点的具体实现类，一个<code>TurmsExtension</code>可<code>implement</code>一个或多个<code>ExtensionPoint</code>，且必须具有public的无参构造函数</li><li><code>ExtensionPoint</code>是Turms服务端定义的具体拓展功能点的接口，如<code>UserAuthenticator</code>与<code>ClientRequestHandler</code></li></ul></li><li><p>（可选）创建插件配置类，写上插件所需配置，并配置上<code>org.springframework.boot.context.properties.ConfigurationProperties</code>注释，用于定义配置名前缀。之后，您可以在<code>TurmsExtension</code>的实现类下，通过<code>loadProperties</code>函数，初始化并自动填充该配置类。</p><p>以具体代码为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPlugin</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsPlugin</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsExtension</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">MyStorageServiceProvider</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyStorageServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsExtension</span> <span class="token keyword">implements</span> <span class="token class-name">StorageServiceProvider</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyPluginProperties</span> properties <span class="token operator">=</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token class-name">MyPluginProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// your business logic</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// your business logic. e.g.:</span>
    <span class="token comment">// Mono&lt;Void&gt; deleteResource(Long requesterId, ContentType contentType, String keyStr, keyNum) {</span>
    <span class="token comment">//     return Mono.empty();</span>
    <span class="token comment">// }</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">&quot;my-plugin&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPluginProperties</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> whatever <span class="token operator">=</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用构建工具（如Maven与Gradle）将源码编译并打包成JAR包，并将JAR包放到Turms服务端的<code>plugins</code>目录下。注意，Turms不支持加载<code>plugins</code>子目录的JAR包。</p><p>插件JAR包内的目录结构类似于：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─plugin.yaml
├─META-INF
│  └─MANIFEST.MF
└─com
  └─mydomain
    ├─MyStorageServiceProvider.class
    ├─MyPlugin.class
    └─MyPluginProperties.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>注意事项：</p><ul><li>Turms服务端只会检测<code>plugins</code>目录下，以<code>.jar</code>文件名结尾的JAR包是否为插件实现，因此如果您将插件JAR包放到<code>lib</code>目录下，则这些插件将不会被识别与使用。</li><li>Turms不对插件进行访问控制，您需要自行确保插件中没有恶意代码。注意：恶意插件不仅可以调用函数直接强制关闭Turms服务端，甚至可以直接控制操作系统。</li><li>由于Turms服务端未来将引入Valhalla项目，因此开发过程需要特别注意不要使用<code>synchronized</code>关键字来锁八大基本包装类的对象，否则将直接抛出异常。</li></ul><h4 id="类加载器" tabindex="-1"><a class="header-anchor" href="#类加载器" aria-hidden="true">#</a> 类加载器</h4><p>Turms服务端的插件类加载器使用parent-first类加载机制。具体而言，在插件实现需要使用一个类（如第三方依赖类：SLF4J、Netty等）时，插件类加载器会将类的加载工作委派给父类加载器，让父类加载器优先尝试加载，以与宿主Turms服务端共享类实现。如果宿主Turms服务端无该依赖的实现，则再尝试加载插件JAR包内的类实现。如果插件JAR包内也没有该类的实现，则会抛出<code>NoClassDefFoundError</code>异常。</p>`,10),y=n("code",null,"maven-shade-plugin",-1),T={href:"https://maven.apache.org/plugins/maven-shade-plugin/examples/class-relocation.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>补充：</p><ul><li>因为每个插件都使用独立的插件类加载器，因此插件JAR包内的类有且仅会被当前插件使用，而不会被其他插件或宿主Turms服务端内部使用。</li><li>Turms不使用child-first类加载机制的原因是：如果插件的类加载器优先加载插件JAR包内的类，则当这些类被传给宿主Turms服务端时，由于这些相同全限定名的类分别被插件的类加载器与宿主Turms服务端使用的类加载器（即application class loader）加载，因此JVM会抛出<code>java.lang.LinkageError</code>。</li></ul><h4 id="插件debug步骤-基于intellij-idea" tabindex="-1"><a class="header-anchor" href="#插件debug步骤-基于intellij-idea" aria-hidden="true">#</a> 插件Debug步骤（基于IntelliJ IDEA）</h4><ol><li><p>在您插件项目下，按<code>Ctrl + F9</code>来自动编译并打包您的插件JAR包到<code>&lt;您插件项目根目录&gt;/target</code>目录下</p></li><li><p>在<code>turms-server-common</code>项目下，把<code>im.turms.server.common.infra.plugin.PluginManager</code>类内的<code>getPluginDir</code>函数实现改成：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Path</span> <span class="token function">getPluginDir</span><span class="token punctuation">(</span><span class="token class-name">Path</span> home<span class="token punctuation">,</span> <span class="token class-name">String</span> pluginsDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;您插件项目根目录&gt;/target&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在您的插件源码上打上断点</p></li><li><p>通过IDEA启动turms-service或turms-gateway服务端，服务端将自动加载<code>&lt;您插件项目根目录&gt;/target</code>内的插件JAR包，并且当服务端执行到您插件源码的断点时，IDEA会暂停服务端运行供您调试</p></li></ol><h3 id="javascript版本" tabindex="-1"><a class="header-anchor" href="#javascript版本" aria-hidden="true">#</a> JavaScript版本</h3><p>为了实现Java插件需要搭一个工程环境，而实现JavaScript插件只需要新建一个JavaScript文件。</p><h4 id="实现步骤-1" tabindex="-1"><a class="header-anchor" href="#实现步骤-1" aria-hidden="true">#</a> 实现步骤</h4><p>以实现<code>StorageServiceProvider</code>插件为例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyTurmsExtension</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsExtension</span> <span class="token punctuation">{</span>
    <span class="token function">getExtensionPoints</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;im.turms.plugin.MyExtensionPoint&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">testBool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">async</span> <span class="token function">testNotification</span><span class="token punctuation">(</span><span class="token parameter">builders</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> builder <span class="token operator">=</span> builders<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> notification <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setReason</span><span class="token punctuation">(</span><span class="token string">&#39;reason&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> List <span class="token operator">=</span> Java<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">&#39;java.util.List&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">await</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">MyTurmsPlugin</span> <span class="token keyword">extends</span> <span class="token class-name">TurmsPlugin</span> <span class="token punctuation">{</span>
    <span class="token function">getDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">return</span> <span class="token punctuation">{</span>
        	<span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;com.mydomain.myplugin&#39;</span><span class="token punctuation">,</span>
	        <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&#39;0.0.1&#39;</span><span class="token punctuation">,</span>
    	    <span class="token literal-property property">provider</span><span class="token operator">:</span> <span class="token string">&#39;com.mydomain&#39;</span><span class="token punctuation">,</span>
        	<span class="token literal-property property">license</span><span class="token operator">:</span> <span class="token string">&#39;MIT&#39;</span><span class="token punctuation">,</span>
	        <span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token string">&#39;&#39;</span>
    	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

    <span class="token function">getExtensions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>MyTurmsExtension<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> MyTurmsPlugin<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><p><code>MyTurmsExtension</code>类是开发者自定义的<code>TurmsExtension</code>拓展，开发者可以自定义类名。其中：</p><ul><li><code>getExtensionPoints</code>函数必须存在，用于返回该拓展类实现了的插件拓展点名称。如果开发者指定了拓展点，但没有实现拓展点的接口函数，则Turms服务端在执行插件回调函数时，会跳过该插件，并不会报错。</li></ul></li><li><p><code>MyTurmsPlugin</code>类是开发者自定义的<code>TurmsPlugin</code>插件，开发者可以自定义类名。其中：</p><ul><li><p><code>getDescriptor</code>函数必须存在，它返回的对象是插件的描述信息：</p><ul><li><p><code>id</code>字段用于区分插件。无格式要求，但是必须不为空。</p></li><li><p>其他字段起描述作用，暂无实际作用，均可为空。</p></li></ul></li><li><p><code>getExtensions</code>函数必须存在，它返回的对象是拓展类数组，如上文的<code>MyTurmsExtension</code>。</p></li></ul></li><li><p><code>export default</code>用于导出开发者自定的插件，如上文的<code>MyTurmsPlugin</code>。</p></li></ul><p>注意事项：</p><ul><li>Turms服务端只会检测<code>plugins</code>目录下，以<code>.js</code>文件名结尾的文件是否为插件实现，因此如果您将插件JAR包放到<code>lib</code>目录下，则这些插件将不会被识别与使用。</li><li>Turms不对插件进行访问控制，您需要自行确保插件中没有恶意代码。注意：恶意插件不仅可以调用函数直接强制关闭Turms服务端，甚至可以直接控制操作系统。</li><li>上下文环境以插件为单位，即每个插件都有它独立的上下文环境，并且一个插件的所有函数公用一个上下文环境。换言之，下次执行的函数可以查看上次执行的函数对上下文环境的改动。</li><li>JavaScript插件也能像Java插件那样访问Turms服务端的Java类与实例，甚至直接调用<code>System.exit()</code>，只是不推荐用JavaScript写复杂的插件</li><li>不支持调用<code>Node.js</code>模块。</li></ul><h4 id="主要全局对象" tabindex="-1"><a class="header-anchor" href="#主要全局对象" aria-hidden="true">#</a> 主要全局对象</h4>`,14),x=n("code",null,"load",-1),J={href:"https://www.graalvm.org/22.0/reference-manual/js/JavaScriptCompatibility/#global-properties",target:"_blank",rel:"noopener noreferrer"},P=n("li",null,[n("code",null,"turms"),s("对象。该对象挂载了： "),n("ul",null,[n("li",null,[n("code",null,"log"),s("对象，用于日志打印")]),n("li",null,[n("code",null,"fetch"),s("函数，用于发送HTTP请求")])])],-1),E=e('<p>TODO</p><h4 id="插件debug步骤" tabindex="-1"><a class="header-anchor" href="#插件debug步骤" aria-hidden="true">#</a> 插件Debug步骤</h4><p>在Debug模式下（配置<code>turms.plugin.js.debug.enabled</code>为<code>true</code>，可以启动Debug模式）：</p><ol><li><p>当插件宿主Turms Java服务端调用由Java <code>Proxy</code>类代理后的JavaScript插件函数实现时（其代理实现源码在：<code>im.turms.server.common.infra.plugin.JsExtensionPointInvocationHandler</code>），监听JavaScript插件的WebSocket Debugger服务端会等待开发者启动Chrome浏览器的Debugger，以保证在开发者绑定完Debugger后，才开始执行JavaScript插件代码。此时调用JavaScript插件函数的Java调用线程会进入<code>WAITING</code>状态，并等待JavaScript插件函数执行完成。</p></li><li><p>为了监听JavaScript插件代码实现，开发者需要自行打开Chrome浏览器，并输入监听JavaScript插件的WebSocket Debugger服务端监听地址，开发者可以在该页面上给JavaScript插件代码打上断点供调试。其中，服务端监听地址会被Turms服务端打印在控制台上，类似于：</p><blockquote><p>Debugger listening on ws://127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531 For help, see: https://www.graalvm.org/tools/chrome-debugger E.g. in Chrome open: devtools://devtools/bundled/js_app.html?ws=127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531</p></blockquote><p>其中的<code>devtools://devtools/bundled/js_app.html?ws=127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531</code>即是监听地址。</p></li><li><p>在绑定完Chrome Debugger后，JavaScript插件函数就会开始执行</p></li><li><p>等JavaScript插件函数执行完毕后，Java调用线程会进入<code>RUNNABLE</code>状态，而Java的代理函数也会接着返回JavaScript插件函数返回的数据。</p></li></ol><h2 id="插件相关api接口" tabindex="-1"><a class="header-anchor" href="#插件相关api接口" aria-hidden="true">#</a> 插件相关API接口</h2><p>OpenAPI地址：http://playground.turms.im:8510/openapi/ui#/plugin-controller</p><table><thead><tr><th style="text-align:left;"><strong>Controller</strong></th><th>路径</th><th>作用</th><th>通用</th></tr></thead><tbody><tr><td style="text-align:left;">PluginController</td><td>GET /plugins</td><td>查询插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>PUT /plugins</td><td>更新插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>DELETE /plugins</td><td>删除插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>POST /plugins/java</td><td>添加Java插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>POST /plugins/js</td><td>添加JavaScript插件</td><td>✅</td></tr></tbody></table>',7);function S(w,_){const a=l("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[d,r,n("p",null,[s("拓展资料："),n("a",k,[s("Turms服务端发布包的目录结构"),t(a)])])]),n("li",null,[v,m,n("p",null,[s("拓展资料："),n("a",g,[s("插件相关API接口"),t(a)])])]),b]),h,n("p",null,[s("如果插件使用的第三方依赖包版本与宿主Turms服务端使用的依赖包版本发生了不兼容冲突，则插件开发者可以自行通过"),y,s("的"),n("a",T,[s("Relocating Classes"),t(a)]),s("方法来解决依赖包冲突。")]),f,n("ul",null,[n("li",null,[x,s("函数是GraalVM的"),n("a",J,[s("全局函数"),t(a)]),s("，用于加载外部JavaScript资源。")]),P]),E])}const M=p(i,[["render",S],["__file","plugin.html.vue"]]);export{M as default};
