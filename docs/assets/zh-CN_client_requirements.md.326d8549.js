import{_ as t,c as e,o as r,R as d}from"./chunks/framework.b6850781.js";const p=JSON.parse('{"title":"版本要求","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/client/requirements.md"}'),o={name:"zh-CN/client/requirements.md"},c=d('<h1 id="版本要求" tabindex="-1">版本要求 <a class="header-anchor" href="#版本要求" aria-label="Permalink to &quot;版本要求&quot;">​</a></h1><p>Turms客户端对版本的最低要求，主要是根据：平台全球市场占有率、平台TLSv1.2最低支持版本与代码实现的优雅程度，三个因素来考量。另外，Turms不提供对TLSv1与TLSv1.1等被时代淘汰协议的官方支持。</p><table><thead><tr><th>平台</th><th>支持的最低版本</th><th>原因</th><th></th></tr></thead><tbody><tr><td>Android</td><td>21+</td><td>考虑到21+的市场占有率与代码实现优雅程度，故支持21+</td><td></td></tr><tr><td>iOS</td><td>12.0+</td><td>考虑到<a href="https://developer.apple.com/support/app-store/" target="_blank" rel="noreferrer">iOS 12.0+在全球的市场占有率</a>以及苹果产品用户的习惯，turms-client-swift采用NWConnection实现TCP协议，因此设备版本的要求等同于支持<code>NWConnection</code>设备的版本要求。<br>另外，turms-client-swift不会考虑用古老的<code>CFStreamCreatePairWithSocketToHost</code>来实现TCP协议。</td><td></td></tr><tr><td>浏览器</td><td><a href="https://caniuse.com/?search=websocket" target="_blank" rel="noreferrer">支持WebSocket协议的浏览器</a></td><td>对于IE浏览器，turms-client-js仅对IE 11提供官方支持。<br>另外，turms-client-js不会将WebSocket降级为轮询机制</td><td></td></tr><tr><td>桌面端</td><td>turms-client-kotlin(JDK8+)<br>turms-client-js(Node.js 8+)</td><td>如果您采用turms-client-kotlin实现，则要求JDK版本为8(+)，因为JDK 8+默认提供对TLSv1.2的支持。<br>如果您采用turms-client-js实现，则Turms提供对Node.js 8+的官方支持</td><td></td></tr></tbody></table><p>补充</p><ul><li>turms-client-kotlin采用的是<code>Socket</code>，而非<code>SocketChannel</code>。其中最主要的原因是：Android SDK不对<code>SocketChannel</code>提供一套标准的TLS协议实现，需要自行实现。考虑到安卓系统的五花八门且系统功能本身就比较受限（尤其相比服务端实现），自行实现TLS协议极易导致各种意料之外的Bugs，故使用<code>Socket</code>以采用官方的TLS协议实现。</li></ul>',5),n=[c];function s(a,i,l,h,_,m){return r(),e("div",null,n)}const S=t(o,[["render",s]]);export{p as __pageData,S as default};
