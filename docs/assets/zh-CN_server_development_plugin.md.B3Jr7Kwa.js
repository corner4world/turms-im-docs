import{_ as a,D as t,c as n,I as l,a3 as s,o as e}from"./chunks/framework.ViWktWD6.js";const m=JSON.parse('{"title":"自定义插件","description":"","frontmatter":{},"headers":[],"relativePath":"zh-CN/server/development/plugin.md","filePath":"zh-CN/server/development/plugin.md"}'),p={name:"zh-CN/server/development/plugin.md"},h=s('<h1 id="自定义插件" tabindex="-1">自定义插件 <a class="header-anchor" href="#自定义插件" aria-label="Permalink to &quot;自定义插件&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>插件（Plugin）：插件是Turms服务端与插件交互的入口，用于描述插件信息，并指定该插件实现了哪些拓展。</li><li>拓展（Extension）：拓展负责实现拓展点，一个拓展可以实现多个拓展点。</li><li>拓展点（Extension Point）：Turms服务端提供的拓展点接口类定义了拓展可以实现哪些接口，插件开发者开发的拓展可以实现这些拓展点接口类。Turms服务端在执行时，会在对应的时机调用这些拓展点接口。</li></ul><h2 id="插件拓展点列表" tabindex="-1">插件拓展点列表 <a class="header-anchor" href="#插件拓展点列表" aria-label="Permalink to &quot;插件拓展点列表&quot;">​</a></h2><table><thead><tr><th>类别</th><th>拓展点</th><th>描述</th></tr></thead><tbody><tr><td>管理员类</td><td>AdminActionHandler</td><td>管理员行为Handler。用于监听管理员的API操作</td></tr><tr><td>用户类</td><td>UserAuthenticator</td><td>用户登陆认证。当客户端向turms-gateway请求登录时，turms-gateway会调用该插件以实现自定义的登录认证逻辑。通过该插件，您就不需要（可选）将您业务系统中的用户信息同步到Turms当中了</td></tr><tr><td></td><td>UserOnlineStatusChangeHandler</td><td>用户在线状态变更Handler。当任意一位用户进入上线或离线状态时，turms-gateway会调用该接口</td></tr><tr><td>请求类</td><td>ClientRequestHandler</td><td>客户端业务请求处理器。用于修改请求参数（甚至可以转变成其他业务请求）与自定义请求实现。当turms收到客户端业务请求时会调用该Handler。通过该插件，您可以实现敏感词过滤等功能</td></tr><tr><td>通知与消息类</td><td>NotificationHandler</td><td>通知Handler。当由于某行为的发生需要通知给相关用户时，turms-gateway会调用该Handler。常用于集成自定义的第三方推送服务</td></tr><tr><td></td><td>ExpiredMessageDeletionNotifier</td><td>过期消息自动删除通知处理器。当Turms自动定期删除过期消息时，Turms服务端会调用该接口，告知该插件实现方所有将要被删除的消息。常用于开发者备份消息</td></tr><tr><td>服务实现类</td><td>StorageServiceProvider</td><td>存储服务Provider。Turms项目本身没有存储服务的具体实现，仅对外暴露了存储服务相关的接口，供该插件实现。（可参考turms-plugin-minio）</td></tr><tr><td>业务模型生命周期类（TODO）</td><td></td><td></td></tr></tbody></table><h2 id="插件加载方式" tabindex="-1">插件加载方式 <a class="header-anchor" href="#插件加载方式" aria-label="Permalink to &quot;插件加载方式&quot;">​</a></h2><ul><li><p>本地加载：Turms服务端会检测发布包<code>plugins</code>目录下，以<code>.jar</code>文件名结尾的JAR包，以及以<code>.js</code>文件名结尾的JavaScript文件是否为插件实现，如果是插件，则会在Turms服务端启动时加载它们。</p><p>注意：Turms服务端不会加载存放在<code>lib</code>目录下的插件。</p><p>拓展资料：<a href="https://turms-im.github.io/docs/zh-CN/server/deployment/distribution#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%8F%91%E5%B8%83%E5%8C%85%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" target="_blank" rel="noreferrer">Turms服务端发布包的目录结构</a></p></li><li><p>通过HTTP接口加载：</p><ul><li>添加Java插件的API接口：<code>POST /plugins/java</code></li><li>添加JavaScript插件的API接口：<code>POST /plugins/js</code></li></ul><p>拓展资料：<a href="https://turms-im.github.io/docs/zh-CN/server/development/plugin#%E6%8F%92%E4%BB%B6%E7%9B%B8%E5%85%B3api%E6%8E%A5%E5%8F%A3" target="_blank" rel="noreferrer">插件相关API接口</a></p></li><li><p>通过turms-admin加载（基于“通过HTTP加载”实现）：在<code>/cluster/plugin</code>页面，管理员也能通过UI的方式上传Java插件与JavaScript插件。</p></li></ul><h2 id="拓展的生命周期" tabindex="-1">拓展的生命周期 <a class="header-anchor" href="#拓展的生命周期" aria-label="Permalink to &quot;拓展的生命周期&quot;">​</a></h2>',8),d=s(`<p>下表格“相关拓展的钩子接口”列中：</p><ul><li><p>“执行成功”指函数异步响应成功，而非抛异常或执行超时。</p></li><li><p>“执行完成”指函数异步响应成功、抛异常或执行超时。</p><p>读者注意区分二者。</p></li></ul><h3 id="主要状态" tabindex="-1">主要状态 <a class="header-anchor" href="#主要状态" aria-label="Permalink to &quot;主要状态&quot;">​</a></h3><table><thead><tr><th>状态</th><th>相关拓展的钩子接口</th><th>描述</th><th>触发事件</th></tr></thead><tbody><tr><td>已载入（Loaded）</td><td>无</td><td>插件已经载入内存</td><td>1. 服务端启动时，会自动加载并启动拓展<br>2. 通过管理员HTTP接口加载插件</td></tr><tr><td>已启动（Started）</td><td>start：当<code>start</code>函数执行成功时，拓展会进入<code>started</code>状态。<br>resume：当<code>resume</code>函数执行成功时，拓展会进入<code>started</code>状态。</td><td>插件已经被启动。<br>只有启动的、且未暂停的拓展的拓展点会被执行</td><td>1. 服务端启动时，会自动加载并启动拓展<br>2. 通过管理员HTTP接口启动插件</td></tr><tr><td>已暂停（Paused）</td><td>pause：当<code>pause</code>函数执行完成时，拓展会进入<code>paused</code>状态</td><td>插件已经被暂停。<br>暂停的拓展的拓展点不会被执行。</td><td>1. 通过管理员HTTP接口加载插件</td></tr><tr><td>已停止（Stopped）</td><td>stop：当<code>stop</code>函数执行完成时，拓展会进入<code>stopped</code>状态</td><td>插件已经被停止。<br>被停止的拓展不能再次启动，其拓展点也不会被执行</td><td>1. 服务端关闭时，会自动关闭拓展<br>2. 通过管理员HTTP接口加载插件</td></tr></tbody></table><h3 id="主要拓展的生命周期钩子接口" tabindex="-1">主要拓展的生命周期钩子接口 <a class="header-anchor" href="#主要拓展的生命周期钩子接口" aria-label="Permalink to &quot;主要拓展的生命周期钩子接口&quot;">​</a></h3><table><thead><tr><th>钩子接口</th><th>执行条件</th><th>可执行次数</th></tr></thead><tbody><tr><td>start</td><td>仅当拓展处于<code>loaded</code>状态时</td><td>至多会被执行成功一次</td></tr><tr><td>pause</td><td>仅当拓展处于<code>started</code>状态时</td><td>无数次</td></tr><tr><td>resume</td><td>仅当拓展处于<code>paused</code>状态时</td><td>无数次</td></tr><tr><td>stop</td><td>当拓展处于<code>loaded</code>、<code>started</code>，或<code>paused</code>状态时</td><td>至多会被执行完成一次</td></tr></tbody></table><p>补充：</p><ul><li><p>Turms服务端在上述表格的事件触发时，会执行对应的拓展的钩子接口。</p><p>插件开发者在实现拓展时，可以可选地实现拓展的钩子接口，以监听拓展的生命周期并执行自定义逻辑。如在<code>start</code>钩子接口中，初始化并建立与自己服务端的网络连接。</p></li><li><p>钩子接口是支持异步执行的。如果是JavaScript实现这些钩子接口时，实现函数可以返回Promise来实现异步逻辑，当然也可以不返回Promise对象。</p></li><li><p>Turms服务端会保证一个拓展的所有生命周期钩子接口会异步串行，而非异步并行。</p><p>举例来说，如果一个拓展的<code>start</code>正在执行初始化逻辑，而管理员同时又调用HTTP接口尝试停止（Stop）插件的拓展。此时，Turms服务端会保证有且仅有当<code>start</code>的异步执行结果返回了、抛异常了，或者超时了，之后的<code>stop</code>生命周期钩子接口才会被调用。因此插件开发者不需要担心同一时刻2个或以上钩子同时被执行的场景。</p></li></ul><p>注意：通过Admin HTTP接口加载自定义插件时，插件的拓展是不会被自动启动的，需要管理员再调用<code>PUT /plugins</code>接口来启动插件的拓展。</p><h2 id="插件实现" tabindex="-1">插件实现 <a class="header-anchor" href="#插件实现" aria-label="Permalink to &quot;插件实现&quot;">​</a></h2><p>Turms服务端支持基于JVM或JavaScript语言的插件实现。</p><table><thead><tr><th></th><th>JVM语言插件</th><th>JavaScript插件</th></tr></thead><tbody><tr><td>语言版本</td><td>Java 21 （Bytecode 65.0）</td><td>ECMAScript 2022</td></tr><tr><td>优点</td><td>适合实现逻辑复杂的功能。<br>比如Turms项目的官方插件<code>turms-plugin-antispam</code>敏感词过滤插件</td><td>只需新建一个JavaScript文件，就可以直接编写自定义逻辑，无需编译，无需打包；<br>方便支持热更新</td></tr><tr><td>缺点</td><td>如果只是实现一点自定义逻辑，依旧需要先搭个插件项目，然后基于构建工具将代码打包成Jar包，流程繁琐</td><td>如果需要实现复杂的逻辑，则不如基于Java插件实现；<br>内存开销比Java插件大；<br>解释执行，运行效率低</td></tr><tr><td>总评</td><td>更适合做实现复杂、偏重且实现相对固定的插件。<br>该类插件更像是一个“工程”</td><td>更适合小巧轻量、需要支持热更新的插件。<br>该类插件更像是一个“小补丁”</td></tr></tbody></table><h3 id="jvm语言版本-以java为例" tabindex="-1">JVM语言版本（以Java为例） <a class="header-anchor" href="#jvm语言版本-以java为例" aria-label="Permalink to &quot;JVM语言版本（以Java为例）&quot;">​</a></h3><h4 id="实现步骤" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h4><ol><li><p>安装Turms项目的JAR包依赖，供您插件编译时使用</p><ul><li>Clone Turms的仓库。参考命令：<code>git clone --depth 1 https://github.com/turms-im/turms.git</code></li><li>在Turms项目的根目录（即<code>.git</code>目录的父目录）下，通过执行<code>mvn install -DskipUTs -DskipITs -DskipSTs</code>命令来编译Turms项目源码，并将生成的JAR包自动安装到本地的Maven仓库中，供您插件编译时使用</li></ul></li><li><p>搭建插件项目</p><ul><li><p>方案一（推荐）：将<code>turms/turms-plugin-demo</code>目录克隆一份到本地，并基于该模板进行开发。该方案可以减少不必要的重复配置工作。</p></li><li><p>方案二：手动搭建。具体步骤如下：</p><ol><li><p>新建一个Maven项目，并在<code>pom.xml</code>中添加依赖（实现turms-gateway服务端的插件，则添加turms-gateway依赖。实现turms-service的插件，则添加turms-service的依赖）：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;im.turms&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;turms-gateway&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;0.10.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;im.turms&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;turms-service&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;0.10.0-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;provided&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>（可选）添加<code>maven-shade-plugin</code>用于将插件打包成uber JAR包。如果您不希望打包依赖JAR包，则不需要添加该插件，但需要您自行确认插件用到的依赖包已存在于Turms服务端当中。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.apache.maven.plugins&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;maven-shade-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;3.4.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">phase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;package&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">phase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;shade&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">outputDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${project.build.outputDirectory}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">outputDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                &lt;!-- Prevent generating the &quot;original&quot; jar file --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">finalName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${project.artifactId}-\${project.version}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">finalName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">minimizeJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;true&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">minimizeJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">executions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li><li><p>在<code>resources</code>目录下，新建一个名称为<code>plugin.yaml</code>的文件，并添加以下插件描述信息（具体的参数值是您自定义插件的信息）</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.mydomain.MyPlugin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.mydomain.MyPlugin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0.1</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">com.mydomain</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">license</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">MIT</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span></code></pre></div><p>其中：</p><ul><li><code>id</code>字段用于区分插件。无格式要求，但是必须不为空</li><li><code>class</code>字段用于引导Turms服务端加载JAR包内的<code>TurmsPlugin</code>实现类，必须不为空</li><li>其他字段起描述作用，暂无实际作用，均可为空</li></ul></li></ol></li></ul></li><li><p>新建一个继承自<code>TurmsPlugin</code>的类，如<code>public class MyPlugin extends TurmsPlugin</code>，然后即可编写插件实现。</p><p>其中：</p><ul><li><code>TurmsPlugin</code>的自定义子类是插件的入口类，且必须带有public的无参构造函数。在<code>plugin.yaml</code>的引导下，Turms服务端会找到这个类，并对其进行初始化</li><li><code>TurmsPlugin</code>带有一个用于指定的<code>TurmsExtension</code>类的函数<code>getExtensions()</code>。它用于引导Turms服务端加载并初始化插件内自定义的<code>TurmsExtension</code>实现</li><li><code>TurmsExtension</code>是拓展功能点的具体实现类，一个<code>TurmsExtension</code>可<code>implement</code>一个或多个<code>ExtensionPoint</code>，且必须具有public的无参构造函数</li><li><code>ExtensionPoint</code>是Turms服务端定义的具体拓展功能点的接口，如<code>UserAuthenticator</code>与<code>ClientRequestHandler</code></li></ul></li><li><p>（可选）创建插件配置类，写上插件所需配置，并配置上<code>org.springframework.boot.context.properties.ConfigurationProperties</code>注释，用于定义配置名前缀。之后，您可以在<code>TurmsExtension</code>的实现类下，通过<code>loadProperties</code>函数，初始化并自动填充该配置类。</p><p>以具体代码为例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurmsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set&lt;Class&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TurmsExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyStorageServiceProvider.class);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyStorageServiceProvider</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurmsExtension</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StorageServiceProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mono&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        MyPluginProperties properties </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loadProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyPluginProperties.class);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // your business logic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // your business logic. e.g.:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Mono&lt;Void&gt; deleteResource(Long requesterId, ContentType contentType, String keyStr, keyNum) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //     return Mono.empty();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Data</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPluginProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String whatever </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用构建工具（如Maven与Gradle）将源码编译并打包成JAR包，并将JAR包放到Turms服务端的<code>plugins</code>目录下。注意，Turms不支持加载<code>plugins</code>子目录的JAR包。</p><p>插件JAR包内的目录结构类似于：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>├─plugin.yaml</span></span>
<span class="line"><span>├─META-INF</span></span>
<span class="line"><span>│  └─MANIFEST.MF</span></span>
<span class="line"><span>└─com</span></span>
<span class="line"><span>  └─mydomain</span></span>
<span class="line"><span>    ├─MyStorageServiceProvider.class</span></span>
<span class="line"><span>    ├─MyPlugin.class</span></span>
<span class="line"><span>    └─MyPluginProperties.class</span></span></code></pre></div></li></ol><p>注意事项：</p><ul><li>Turms服务端只会检测<code>plugins</code>目录下，以<code>.jar</code>文件名结尾的JAR包是否为插件实现，因此如果您将插件JAR包放到<code>lib</code>目录下，则这些插件将不会被识别与使用。</li><li>Turms不对插件进行访问控制，您需要自行确保插件中没有恶意代码。注意：恶意插件不仅可以调用函数直接强制关闭Turms服务端，甚至可以直接控制操作系统。</li><li>由于Turms服务端未来将引入Valhalla项目，因此开发过程需要特别注意不要使用<code>synchronized</code>关键字来锁八大基本包装类的对象，否则将直接抛出异常。</li></ul><h4 id="类加载器" tabindex="-1">类加载器 <a class="header-anchor" href="#类加载器" aria-label="Permalink to &quot;类加载器&quot;">​</a></h4><p>Turms服务端的插件类加载器使用parent-first类加载机制。具体而言，在插件实现需要使用一个类（如第三方依赖类：SLF4J、Netty等）时，插件类加载器会将类的加载工作委派给父类加载器，让父类加载器优先尝试加载，以与宿主Turms服务端共享类实现。如果宿主Turms服务端无该依赖的实现，则再尝试加载插件JAR包内的类实现。如果插件JAR包内也没有该类的实现，则会抛出<code>NoClassDefFoundError</code>异常。</p><p>如果插件使用的第三方依赖包版本与宿主Turms服务端使用的依赖包版本发生了不兼容冲突，则插件开发者可以自行通过<code>maven-shade-plugin</code>的<a href="https://maven.apache.org/plugins/maven-shade-plugin/examples/class-relocation" target="_blank" rel="noreferrer">Relocating Classes</a>方法来解决依赖包冲突。</p><p>补充：</p><ul><li>因为每个插件都使用独立的插件类加载器，因此插件JAR包内的类有且仅会被当前插件使用，而不会被其他插件或宿主Turms服务端内部使用。</li><li>Turms不使用child-first类加载机制的原因是：如果插件的类加载器优先加载插件JAR包内的类，则当这些类被传给宿主Turms服务端时，由于这些相同全限定名的类分别被插件的类加载器与宿主Turms服务端使用的类加载器（即application class loader）加载，因此JVM会抛出<code>java.lang.LinkageError</code>。</li></ul><h4 id="插件debug步骤-基于intellij-idea" tabindex="-1">插件Debug步骤（基于IntelliJ IDEA） <a class="header-anchor" href="#插件debug步骤-基于intellij-idea" aria-label="Permalink to &quot;插件Debug步骤（基于IntelliJ IDEA）&quot;">​</a></h4><ol><li><p>在您插件项目下，按<code>Ctrl + F9</code>来自动编译并打包您的插件JAR包到<code>&lt;您插件项目根目录&gt;/target</code>目录下</p></li><li><p>在<code>turms-server-common</code>项目下，把<code>im.turms.server.common.infra.plugin.PluginManager</code>类内的<code>getPluginDir</code>函数实现改成：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPluginDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path home, String pluginsDir) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;您插件项目根目录&gt;/target&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的插件源码上打上断点</p></li><li><p>通过IDEA启动turms-service或turms-gateway服务端，服务端将自动加载<code>&lt;您插件项目根目录&gt;/target</code>内的插件JAR包，并且当服务端执行到您插件源码的断点时，IDEA会暂停服务端运行供您调试</p></li></ol><h3 id="javascript版本" tabindex="-1">JavaScript版本 <a class="header-anchor" href="#javascript版本" aria-label="Permalink to &quot;JavaScript版本&quot;">​</a></h3><p>为了实现Java插件需要搭一个工程环境，而实现JavaScript插件只需要新建一个JavaScript文件。</p><h4 id="实现步骤-1" tabindex="-1">实现步骤 <a class="header-anchor" href="#实现步骤-1" aria-label="Permalink to &quot;实现步骤&quot;">​</a></h4><p>以实现<code>StorageServiceProvider</code>插件为例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTurmsExtension</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurmsExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getExtensionPoints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;im.turms.plugin.MyExtensionPoint&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testBool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    async</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">builders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> builder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> notification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> builder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;reason&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> List</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;java.util.List&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> List.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(notification);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyTurmsPlugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TurmsPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    	return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        	id: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.mydomain.myplugin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	        version: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;0.0.1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	    provider: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;com.mydomain&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        	license: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MIT&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	        description: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    	};</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getExtensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MyTurmsExtension];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyTurmsPlugin;</span></span></code></pre></div><p>其中：</p><ul><li><p><code>MyTurmsExtension</code>类是开发者自定义的<code>TurmsExtension</code>拓展，开发者可以自定义类名。其中：</p><ul><li><code>getExtensionPoints</code>函数必须存在，用于返回该拓展类实现了的插件拓展点名称。如果开发者指定了拓展点，但没有实现拓展点的接口函数，则Turms服务端在执行插件回调函数时，会跳过该插件，并不会报错。</li></ul></li><li><p><code>MyTurmsPlugin</code>类是开发者自定义的<code>TurmsPlugin</code>插件，开发者可以自定义类名。其中：</p><ul><li><p><code>getDescriptor</code>函数必须存在，它返回的对象是插件的描述信息：</p><ul><li><p><code>id</code>字段用于区分插件。无格式要求，但是必须不为空。</p></li><li><p>其他字段起描述作用，暂无实际作用，均可为空。</p></li></ul></li><li><p><code>getExtensions</code>函数必须存在，它返回的对象是拓展类数组，如上文的<code>MyTurmsExtension</code>。</p></li></ul></li><li><p><code>export default</code>用于导出开发者自定的插件，如上文的<code>MyTurmsPlugin</code>。</p></li></ul><p>注意事项：</p><ul><li>Turms服务端只会检测<code>plugins</code>目录下，以<code>.js</code>文件名结尾的文件是否为插件实现，因此如果您将插件JAR包放到<code>lib</code>目录下，则这些插件将不会被识别与使用。</li><li>Turms不对插件进行访问控制，您需要自行确保插件中没有恶意代码。注意：恶意插件不仅可以调用函数直接强制关闭Turms服务端，甚至可以直接控制操作系统。</li><li>上下文环境以插件为单位，即每个插件都有它独立的上下文环境，并且一个插件的所有函数公用一个上下文环境。换言之，下次执行的函数可以查看上次执行的函数对上下文环境的改动。</li><li>JavaScript插件也能像Java插件那样访问Turms服务端的Java类与实例，甚至直接调用<code>System.exit()</code>，只是不推荐用JavaScript写复杂的插件</li><li>不支持调用<code>Node.js</code>模块。</li></ul><h4 id="主要全局对象" tabindex="-1">主要全局对象 <a class="header-anchor" href="#主要全局对象" aria-label="Permalink to &quot;主要全局对象&quot;">​</a></h4><ul><li><code>load</code>函数是GraalVM的<a href="https://www.graalvm.org/22.0/reference-manual/js/JavaScriptCompatibility/#global-properties" target="_blank" rel="noreferrer">全局函数</a>，用于加载外部JavaScript资源。</li><li><code>turms</code>对象。该对象挂载了： <ul><li><code>log</code>对象，用于日志打印</li><li><code>fetch</code>函数，用于发送HTTP请求</li></ul></li></ul><p>TODO</p><h4 id="插件debug步骤" tabindex="-1">插件Debug步骤 <a class="header-anchor" href="#插件debug步骤" aria-label="Permalink to &quot;插件Debug步骤&quot;">​</a></h4><p>在Debug模式下（配置<code>turms.plugin.js.debug.enabled</code>为<code>true</code>，可以启动Debug模式）：</p><ol><li><p>当插件宿主Turms Java服务端调用由Java <code>Proxy</code>类代理后的JavaScript插件函数实现时（其代理实现源码在：<code>im.turms.server.common.infra.plugin.JsExtensionPointInvocationHandler</code>），监听JavaScript插件的WebSocket Debugger服务端会等待开发者启动Chrome浏览器的Debugger，以保证在开发者绑定完Debugger后，才开始执行JavaScript插件代码。此时调用JavaScript插件函数的Java调用线程会进入<code>WAITING</code>状态，并等待JavaScript插件函数执行完成。</p></li><li><p>为了监听JavaScript插件代码实现，开发者需要自行打开Chrome浏览器，并输入监听JavaScript插件的WebSocket Debugger服务端监听地址，开发者可以在该页面上给JavaScript插件代码打上断点供调试。其中，服务端监听地址会被Turms服务端打印在控制台上，类似于：</p><blockquote><p>Debugger listening on ws://127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531 For help, see: <a href="https://www.graalvm.org/tools/chrome-debugger" target="_blank" rel="noreferrer">https://www.graalvm.org/tools/chrome-debugger</a> E.g. in Chrome open: devtools://devtools/bundled/js_app.html?ws=127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531</p></blockquote><p>其中的<code>devtools://devtools/bundled/js_app.html?ws=127.0.0.1:24242/bd62b7be-bdec-48a6-9ad0-9314af33d531</code>即是监听地址。</p></li><li><p>在绑定完Chrome Debugger后，JavaScript插件函数就会开始执行</p></li><li><p>等JavaScript插件函数执行完毕后，Java调用线程会进入<code>RUNNABLE</code>状态，而Java的代理函数也会接着返回JavaScript插件函数返回的数据。</p></li></ol><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><table><thead><tr><th>配置名</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>turms.plugin.enabled</td><td>true</td><td>是否开启插件机制</td></tr><tr><td>turms.plugin.dir</td><td><code>plugins</code></td><td>本地插件所在目录。Turms服务端将从该目录中加载插件</td></tr><tr><td>turms.plugin.network.proxy.enabled</td><td>false</td><td>下载网络插件时，是否开启HTTP代理</td></tr><tr><td>turms.plugin.network.proxy.username</td><td></td><td>HTTP代理用户名</td></tr><tr><td>turms.plugin.network.proxy.password</td><td></td><td>HTTP代理密码</td></tr><tr><td>turms.plugin.network.proxy.host</td><td></td><td>HTTP代理主机名</td></tr><tr><td>turms.plugin.network.proxy.port</td><td>8080</td><td>HTTP代理端口号</td></tr><tr><td>turms.plugin.network.proxy.connect-timeout-millis</td><td>60_000</td><td>HTTP代理连接超时时长（毫秒）</td></tr><tr><td>turms.plugin.network.plugins[?].url</td><td></td><td>插件URL</td></tr><tr><td>turms.plugin.network.plugins[?].type</td><td><code>AUTO</code></td><td>插件类型。<br>当值为<code>AUTO</code>时，Turms服务端会根据URL的路径检测插件的类型：如果URL以<code>.jar</code>结尾，则判断为Java插件，如果URL以<code>.js</code>结尾，则判断为JavaScript插件，否则Turms服务端会抛出无法识别插件类型的异常。<br>当值为<code>JAVA</code>时，则为Java插件类型<br>当值为<code>JAVA_SCRIPT</code>时，则为JavaScript插件类型</td></tr><tr><td>turms.plugin.network.plugins[?].use-local-cache</td><td>false</td><td>是否使用本地插件缓存。如果<code>false</code>，Turms服务端会在每次启动时都重新下载插件</td></tr><tr><td>turms.plugin.network.plugins[?].download.http-method</td><td><code>GET</code></td><td>请求插件URL时，HTTP请求的方法类型</td></tr><tr><td>turms.plugin.network.plugins[?].download.timeout-millis</td><td>60_000</td><td>下载插件的超时时间（毫秒）</td></tr></tbody></table><h2 id="插件相关api接口" tabindex="-1">插件相关API接口 <a class="header-anchor" href="#插件相关api接口" aria-label="Permalink to &quot;插件相关API接口&quot;">​</a></h2><p>OpenAPI地址：<a href="http://playground.turms.im:8510/openapi/ui#/plugin-controller" target="_blank" rel="noreferrer">http://playground.turms.im:8510/openapi/ui#/plugin-controller</a></p><table><thead><tr><th style="text-align:left;"><strong>Controller</strong></th><th>路径</th><th>作用</th><th>通用</th></tr></thead><tbody><tr><td style="text-align:left;">PluginController</td><td>GET /plugins</td><td>查询插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>PUT /plugins</td><td>更新插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>DELETE /plugins</td><td>删除插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>POST /plugins/java</td><td>添加Java插件</td><td>✅</td></tr><tr><td style="text-align:left;"></td><td>POST /plugins/js</td><td>添加JavaScript插件</td><td>✅</td></tr></tbody></table>`,44);function r(k,E,o,c,g,u){const i=t("mermaid");return e(),n("div",null,[h,l(i,{dsl:`stateDiagram-v2
	[*] --> Loaded: Load
	state start_if_succeed <<choice>>
	state resume_if_succeed <<choice>>

	Loaded --> start_if_succeed: Start
	start_if_succeed --> Started: If succeed
	start_if_succeed --> Loaded: If fail<br>(Throw or Time out)
	Loaded --> Stopped: Stop
	Started --> Paused: Pause
	Paused --> resume_if_succeed: Resume
	resume_if_succeed --> Started: If succeed
	resume_if_succeed --> Paused: If fail<br>(Throw or Time out)
	Started --> Stopped: Stop
	Paused --> Stopped: Stop

	Stopped --> [*]`}),d])}const b=a(p,[["render",r]]);export{m as __pageData,b as default};
