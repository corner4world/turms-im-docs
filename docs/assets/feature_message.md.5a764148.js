import{_ as e,o as t,c as s,Q as a}from"./chunks/framework.0882ee08.js";const f=JSON.parse('{"title":"Message-related Features","description":"","frontmatter":{},"headers":[],"relativePath":"feature/message.md","filePath":"feature/message.md"}'),r={name:"feature/message.md"},i=a('<h1 id="message-related-features" tabindex="-1">Message-related Features <a class="header-anchor" href="#message-related-features" aria-label="Permalink to &quot;Message-related Features&quot;">​</a></h1><h2 id="related-paths-and-models" tabindex="-1">Related paths and models <a class="header-anchor" href="#related-paths-and-models" aria-label="Permalink to &quot;Related paths and models&quot;">​</a></h2><ul><li>Admin API path: <code>/messages</code>. For specific API details, please refer to the OpenAPI documentation</li><li>Client interface: Please refer to the <code>MessageServiceController</code> class</li><li>The underlying request model: please refer to the interface description file in the <code>https://github.com/turms-im/proto/tree/master/request/message</code> directory</li><li>Configuration class: <code>im.turms.server.common.infra.property.env.service.business.message.MessageProperties</code></li></ul><h2 id="function-list" tabindex="-1">function list <a class="header-anchor" href="#function-list" aria-label="Permalink to &quot;function list&quot;">​</a></h2><table><thead><tr><th style="text-align:left;"><strong><div style="min-width:70px;">Message function</div></strong></th><th><strong>Function description</strong></th><th><strong>Related configuration</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Offline Messages</td><td>Implementation ideas: You can actively request the Turms server for specific offline messages of all private chats and group chats received when the user is offline every time the Turms client logs in. Quantity, and the specific data of the last N messages (default is 1)&gt;, so as to take into account both the real-time nature of the message and the performance of the service. By default, the Turms server does not regularly delete any offline messages stored on the Turms server</td><td>turms.service.message.default-available-messages-number-with-total</td></tr><tr><td style="text-align:left;">Roaming Messages</td><td>✍When a new device logs in, the developer calls the message query interface of the Turms client, specifies the number and time period, and requests roaming messages from the Turms server. <br>The implementation of roaming messages is essentially the same as that of &quot;historical messages&quot;<br>(✍Reason: Turms cannot judge what is &quot;new device login&quot;)</td><td></td></tr><tr><td style="text-align:left;">Multi-terminal synchronization</td><td>When a user has multiple clients online at the same time, the Turms server will send the message to all the online clients of the user</td><td></td></tr><tr><td style="text-align:left;">Historical Messages</td><td>Support querying user&#39;s historical messages. By default, Turms permanently stores messages (including user messages or system messages)<br>The implementation of historical messages is essentially the same as that of &quot;roaming messages&quot;</td><td>turms.service.message.message-retention-period-hours<br>turms. service.message.expired-messages-cleanup-cron</td></tr><tr><td style="text-align:left;">Send Message</td><td></td><td>turms.service.message.time-type<br>turms.service.message.persist-message<br>turms.service.message.persist-record<br>turms.service.message. persist-pre-message-id<br>turms.service.message.persist-sender-ip<br>turms.service.message.check-if-target-active-and-not-deleted<br>turms .service.message.max-text-limit<br>turms.service.message.max-records-size-bytes<br>turms.service.message.allow-send-messages-to-oneself<br> turms.service.message.allow-send-messages-to-stranger<br>turms.service.message.delete-message-logically-by-default<br>turms.service.message.send-message-to- other-sender-online-devices<br>turms.service.message.use-conversation-id<br>turms.service.message.sequence-id.use-sequence-id-for-group-conversation<br> &gt;turms.service.message.sequence-id.use-sequence-id-for-private-conversation</td></tr><tr><td style="text-align:left;">Message Recall</td><td>Withdraw a message that has been successfully delivered. By default, the sender is allowed to withdraw the message within 5 minutes of the successful delivery time</td><td>turms.service.message.allow-recall-message<br>turms.service.message.available-recall- duration-seconds</td></tr><tr><td style="text-align:left;">Message Editing</td><td>Edit a successfully sent message</td><td>turms.service.message.allow-edit-message-by-sender</td></tr><tr><td style="text-align:left;">Burn after reading</td><td>After the recipient receives the sender&#39;s message, the recipient&#39;s client will automatically destroy it on time according to the time preset (or default) by the sender</td><td></td></tr><tr><td style="text-align:left;">Read Receipt</td><td>✍Notify the private chat object or group members that the current user has read a message<br>Check the read/unread status of the other party in the private chat and group conversation<br>(✍reason : Turms cannot know under what circumstances your user has &quot;read a certain message&quot;. The developer needs to call turmsClient.messageService.readMessage() to inform the other party that the current user has read a certain message)</td><td>turms.service. conversation.read-receipt.enabled<br>allow-move-read-date-forward<br>turms.service.conversation.read-receipt.update-read-date-after-message-sent<br>turms .service.conversation.read-receipt.update-read-date-when-user-querying-message<br>turms.service.conversation.read-receipt.use-server-time</td></tr><tr><td style="text-align:left;">Message Forwarding</td><td>Forwarding a message to another user or group</td><td></td></tr><tr><td style="text-align:left;">@someone</td><td>is used to specifically remind a user. If the Turms client detects that the user @ in the received message is currently logged in, the Turms client will trigger the @ callback function. Developers can implement subsequent related business logic by themselves. It is often used to remind users who are @. <br>There is no essential difference between the @ message in the group and the ordinary message, only that when the @ message is received, special processing is required (triggering a callback function)</td><td></td></tr><tr><td style="text-align:left;">Typing</td><td>✍When a party in a communication is typing text, inform the recipient (user or users) that the user is typing the message<br>(✍Reason: Turms has no way of knowing whether your users are typing text)</td><td>turms.service.conversation.typing-status.enabled</td></tr></tbody></table><h3 id="precautions-when-querying-session-messages" tabindex="-1">Precautions when querying session messages <a class="header-anchor" href="#precautions-when-querying-session-messages" aria-label="Permalink to &quot;Precautions when querying session messages&quot;">​</a></h3><p>By default, Turms does not support &quot;In a private chat session, the message sender can query the messages he sent himself&quot; (specific reason: <a href="https://turms-im.github.io/docs/design/schema#%E7%B4%A2%E5%BC%95" target="_blank" rel="noreferrer">Message Index Design</a>. Note: In a group chat session, the message sender can always query his own messages.) Developers can pass in turms-service Configure <code>turms.service.message.use-conversation-id=true</code> in the configuration file of the server to enable <code>conversation ID</code>.</p><p>Afterwards, the semantics of <code>turmsClient.messageService.queryMessages({areGroupMessages: false, fromIds: [10,11,12]})</code> will be replaced by the original &quot;query messages sent by users whose IDs are 11, 12, and 13 in a private chat session. &quot;Messages to the current user&quot; becomes &quot;query the messages sent by the users whose user IDs are 11, 12 and 13 to the current user, and the messages sent by the current user to users whose user IDs are 11, 12 and 13 in the private chat session &quot;.</p><h2 id="business-message-type" tabindex="-1">Business message type <a class="header-anchor" href="#business-message-type" aria-label="Permalink to &quot;Business message type&quot;">​</a></h2><p>From a developer&#39;s point of view, the Turms client has and only uses one data model when sending messages, namely <code>CreateMessageRequest</code>. Since it has fields of type string and List&lt;byte[]&gt;, you can actually pass any kind of data when sending a message. It&#39;s just that in order to facilitate developers to quickly implement various business message types, the Turms client divides common message types to facilitate developers to get started quickly.</p><p>Reminder: Turms messages (messages of all business types) can be marked as system messages. However, system messages can only be sent through the turms admin API, and the Turms client cannot send system messages.</p><table><thead><tr><th style="text-align:left;"><strong><div style="min-width:100px;">Business message type</div></strong></th><th style="text-align:left;"><strong>Description</strong></th></tr></thead><tbody><tr><td style="text-align:left;">Text message</td><td style="text-align:left;">The content of the message is text<br>Reminder: Text can also be JSON, encoded as Base64 binary data</td></tr><tr><td style="text-align:left;">Image message</td><td style="text-align:left;">The content of the message is the description part (optional): image URL address, size, image size<br>Image data (optional)</td></tr><tr><td style="text-align:left;">Voice message</td><td style="text-align:left;">The content of the message is the description part (optional): URL address, duration, size, format of the voice file<br>Voice data (optional)<br></td></tr><tr><td style="text-align:left;">Video message</td><td style="text-align:left;">The content of the message is the description part (optional): URL address, duration, size, format of the video file<br>Video data (optional)<br></td></tr><tr><td style="text-align:left;">File message</td><td style="text-align:left;">The content of the message is the description part (optional): URL address, size, format of the file<br>File data (optional)<br></td></tr><tr><td style="text-align:left;">Geographic location message</td><td style="text-align:left;">The content of the message is geographic location title, address, longitude and latitude information</td></tr><tr><td style="text-align:left;">Combined message</td><td style="text-align:left;">The content of the message is text information and any number of other messages of any content type (for example: a message contains both text, pictures and audio)</td></tr><tr><td style="text-align:left;">Custom message</td><td style="text-align:left;">Turms only uses one data structure during transmission, and it can carry string and List&lt;byte[]&gt; data structures. Therefore, developers are free to implement any custom message types, such as messages in the form of red envelope messages, rock-paper-scissors, etc.</td></tr></tbody></table><h3 id="implementation-of-binary-data-transmission" tabindex="-1">Implementation of binary data transmission <a class="header-anchor" href="#implementation-of-binary-data-transmission" aria-label="Permalink to &quot;Implementation of binary data transmission&quot;">​</a></h3><p>There are two main implementation schemes for the transmission of binary data (files):</p><table><thead><tr><th></th><th>Use the Turms client to send the records field of the message API (not recommended)</th><th>Use object storage services (AWS S3, Alibaba Cloud OSS, etc.)</th></tr></thead><tbody><tr><td>Introduction</td><td>By default, Turms supports the transmission and storage of binary data <code>records</code> attached to messages, so you can store binary data such as pictures, videos, files, etc. in <code>records</code></td><td>Your application client (Note: here &quot;client &quot;It is not the client of Turms, but the client of your IM application) to request the OSS operation permission Token from your service server program, and the client will take this Token to find the OSS service and upload the file to OSS, and then take it from OSS The returned file URL is passed to the Turms server, and Turms saves the URL text instead of the binary data of the file. <br>Because the Turms plug-in supports developers to implement file management services by themselves, you can also implement this function by implementing a plug-in. For example, the integrated implementation <code>turms-plugin-minio</code> of the MinIO object storage server officially provided by Turms is implemented based on the Turms plugin, for your reference</td></tr><tr><td>Advantages</td><td>Simple implementation</td><td>Unlimited capacity;<br>Support CDN acceleration, optimize user experience;<br>Support UI visual management, and provide various operation and maintenance management functions. Cloud storage services generally support practical features such as redundant storage, server-side encryption, and hierarchical storage of hot and cold data (which greatly reduces data storage costs)</td></tr><tr><td>Disadvantage</td><td>A Turms client has and only establishes one TCP connection with the server, so if the user uses the <code>records</code> field that comes with the Turms client to transfer a large file, it will block the data transmission of other business requests;<br>When MongoDB queries message data, it will load the entire message record into the memory, which greatly slows down the message query speed</td><td></td></tr></tbody></table><p>Reference: <a href="https://turms-im.github.io/docs/server/module/storage" target="_blank" rel="noreferrer">Storage Service</a></p>',16),n=[i];function o(d,l,m,c,u,h){return t(),s("div",null,n)}const p=e(r,[["render",o]]);export{f as __pageData,p as default};
